
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ecc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003004  08003004  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003004  08003004  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003004  08003004  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800300c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000060  0800306c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800306c  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3b5  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d72  00000000  00000000  0002a43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171bd  00000000  00000000  0002d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce1d  00000000  00000000  00044875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008264c  00000000  00000000  00051692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3cde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b60  00000000  00000000  000d3d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fc0 	.word	0x08002fc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002fc0 	.word	0x08002fc0

0800014c <isButtonPressed>:
int KeyReg3[NUM_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int TimeForKeyPress =  200;
int button_flag[NUM_OF_BUTTON] = {0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000007c 	.word	0x2000007c

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000007c 	.word	0x2000007c

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_OF_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e062      	b.n	8000272 <getKeyInput+0xd2>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a35      	ldr	r2, [pc, #212]	; (8000284 <getKeyInput+0xe4>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4934      	ldr	r1, [pc, #208]	; (8000288 <getKeyInput+0xe8>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    KeyReg1[i] = KeyReg0[i];
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <getKeyInput+0xec>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	492f      	ldr	r1, [pc, #188]	; (8000284 <getKeyInput+0xe4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, buttonList[i]);
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <getKeyInput+0xf0>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	482e      	ldr	r0, [pc, #184]	; (8000294 <getKeyInput+0xf4>)
 80001da:	f001 feb1 	bl	8001f40 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a2a      	ldr	r2, [pc, #168]	; (800028c <getKeyInput+0xec>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <getKeyInput+0xe4>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4926      	ldr	r1, [pc, #152]	; (800028c <getKeyInput+0xec>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d136      	bne.n	800026c <getKeyInput+0xcc>
 80001fe:	4a21      	ldr	r2, [pc, #132]	; (8000284 <getKeyInput+0xe4>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4920      	ldr	r1, [pc, #128]	; (8000288 <getKeyInput+0xe8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d12c      	bne.n	800026c <getKeyInput+0xcc>
		   if (KeyReg2[i] != KeyReg3[i]){
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <getKeyInput+0xe8>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	491f      	ldr	r1, [pc, #124]	; (8000298 <getKeyInput+0xf8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d014      	beq.n	8000250 <getKeyInput+0xb0>
		      KeyReg3[i] = KeyReg2[i];
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <getKeyInput+0xe8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	491a      	ldr	r1, [pc, #104]	; (8000298 <getKeyInput+0xf8>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		      if (KeyReg3[i] == PRESSED_STATE){
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <getKeyInput+0xf8>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d114      	bne.n	800026c <getKeyInput+0xcc>
			     TimeForKeyPress = 200;
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <getKeyInput+0xfc>)
 8000244:	22c8      	movs	r2, #200	; 0xc8
 8000246:	601a      	str	r2, [r3, #0]
			     subKeyProcess(i);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff99 	bl	8000180 <subKeyProcess>
 800024e:	e00d      	b.n	800026c <getKeyInput+0xcc>
		      }
		   } else {
			   	  TimeForKeyPress--;
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <getKeyInput+0xfc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	3b01      	subs	r3, #1
 8000256:	4a11      	ldr	r2, [pc, #68]	; (800029c <getKeyInput+0xfc>)
 8000258:	6013      	str	r3, [r2, #0]
			      if (TimeForKeyPress == 0){
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d104      	bne.n	800026c <getKeyInput+0xcc>
			      KeyReg3[i] = NORMAL_STATE;
 8000262:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <getKeyInput+0xf8>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2101      	movs	r1, #1
 8000268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<NUM_OF_BUTTON; i++){
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3301      	adds	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2b03      	cmp	r3, #3
 8000276:	dd99      	ble.n	80001ac <getKeyInput+0xc>
			      }
		     }
	    }
	}
}
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000020 	.word	0x20000020
 8000288:	20000030 	.word	0x20000030
 800028c:	20000010 	.word	0x20000010
 8000290:	20000000 	.word	0x20000000
 8000294:	40010800 	.word	0x40010800
 8000298:	20000040 	.word	0x20000040
 800029c:	20000050 	.word	0x20000050

080002a0 <fsm_automatic>:

#include "fsm_automatic.h"

int led_buffer[2] = {0, 0};

void fsm_automatic(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if (mode == MODE1){
 80002a4:	4b9d      	ldr	r3, [pc, #628]	; (800051c <fsm_automatic+0x27c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	f040 817b 	bne.w	80005a4 <fsm_automatic+0x304>
		// AUTO MODE 1
		switch (statusAUTO1){
 80002ae:	4b9c      	ldr	r3, [pc, #624]	; (8000520 <fsm_automatic+0x280>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d86b      	bhi.n	800038e <fsm_automatic+0xee>
 80002b6:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <fsm_automatic+0x1c>)
 80002b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002bc:	080002cd 	.word	0x080002cd
 80002c0:	080002db 	.word	0x080002db
 80002c4:	08000317 	.word	0x08000317
 80002c8:	08000353 	.word	0x08000353
			case INIT:
				statusAUTO1 = STATE_RED;
 80002cc:	4b94      	ldr	r3, [pc, #592]	; (8000520 <fsm_automatic+0x280>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 80002d2:	2064      	movs	r0, #100	; 0x64
 80002d4:	f001 f82a 	bl	800132c <setTimer1>
				break;
 80002d8:	e060      	b.n	800039c <fsm_automatic+0xfc>
			case STATE_RED:
				if (timer1_flag == 1){
 80002da:	4b92      	ldr	r3, [pc, #584]	; (8000524 <fsm_automatic+0x284>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d157      	bne.n	8000392 <fsm_automatic+0xf2>
					enableRed1();
 80002e2:	f001 fa33 	bl	800174c <enableRed1>
					led_buffer[0] = counterRed1;
 80002e6:	4b90      	ldr	r3, [pc, #576]	; (8000528 <fsm_automatic+0x288>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a90      	ldr	r2, [pc, #576]	; (800052c <fsm_automatic+0x28c>)
 80002ec:	6013      	str	r3, [r2, #0]
					counterRed1--;
 80002ee:	4b8e      	ldr	r3, [pc, #568]	; (8000528 <fsm_automatic+0x288>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	4a8c      	ldr	r2, [pc, #560]	; (8000528 <fsm_automatic+0x288>)
 80002f6:	6013      	str	r3, [r2, #0]
					if (counterRed1 == INIT){
 80002f8:	4b8b      	ldr	r3, [pc, #556]	; (8000528 <fsm_automatic+0x288>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d106      	bne.n	800030e <fsm_automatic+0x6e>
						counterRed1 = AUTO_RED;
 8000300:	4b8b      	ldr	r3, [pc, #556]	; (8000530 <fsm_automatic+0x290>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a88      	ldr	r2, [pc, #544]	; (8000528 <fsm_automatic+0x288>)
 8000306:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_GREEN;
 8000308:	4b85      	ldr	r3, [pc, #532]	; (8000520 <fsm_automatic+0x280>)
 800030a:	2202      	movs	r2, #2
 800030c:	601a      	str	r2, [r3, #0]
					}
					setTimer1(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f001 f80c 	bl	800132c <setTimer1>
				}
				break;
 8000314:	e03d      	b.n	8000392 <fsm_automatic+0xf2>
			case STATE_GREEN:
				if (timer1_flag == 1){
 8000316:	4b83      	ldr	r3, [pc, #524]	; (8000524 <fsm_automatic+0x284>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d13b      	bne.n	8000396 <fsm_automatic+0xf6>
					enableGreen1();
 800031e:	f001 fa41 	bl	80017a4 <enableGreen1>
					led_buffer[0] = counterGreen1;
 8000322:	4b84      	ldr	r3, [pc, #528]	; (8000534 <fsm_automatic+0x294>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a81      	ldr	r2, [pc, #516]	; (800052c <fsm_automatic+0x28c>)
 8000328:	6013      	str	r3, [r2, #0]
					counterGreen1--;
 800032a:	4b82      	ldr	r3, [pc, #520]	; (8000534 <fsm_automatic+0x294>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	3b01      	subs	r3, #1
 8000330:	4a80      	ldr	r2, [pc, #512]	; (8000534 <fsm_automatic+0x294>)
 8000332:	6013      	str	r3, [r2, #0]
					if (counterGreen1 == INIT){
 8000334:	4b7f      	ldr	r3, [pc, #508]	; (8000534 <fsm_automatic+0x294>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d106      	bne.n	800034a <fsm_automatic+0xaa>
						counterGreen1 = AUTO_GREEN;
 800033c:	4b7e      	ldr	r3, [pc, #504]	; (8000538 <fsm_automatic+0x298>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a7c      	ldr	r2, [pc, #496]	; (8000534 <fsm_automatic+0x294>)
 8000342:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_YELLOW;
 8000344:	4b76      	ldr	r3, [pc, #472]	; (8000520 <fsm_automatic+0x280>)
 8000346:	2203      	movs	r2, #3
 8000348:	601a      	str	r2, [r3, #0]
					}
					setTimer1(100);
 800034a:	2064      	movs	r0, #100	; 0x64
 800034c:	f000 ffee 	bl	800132c <setTimer1>
				}
				break;
 8000350:	e021      	b.n	8000396 <fsm_automatic+0xf6>
			case STATE_YELLOW:
				if (timer1_flag == 1){
 8000352:	4b74      	ldr	r3, [pc, #464]	; (8000524 <fsm_automatic+0x284>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d11f      	bne.n	800039a <fsm_automatic+0xfa>
					enableYellow1();
 800035a:	f001 fa0d 	bl	8001778 <enableYellow1>
					led_buffer[0] = counterYellow1;
 800035e:	4b77      	ldr	r3, [pc, #476]	; (800053c <fsm_automatic+0x29c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a72      	ldr	r2, [pc, #456]	; (800052c <fsm_automatic+0x28c>)
 8000364:	6013      	str	r3, [r2, #0]
					counterYellow1--;
 8000366:	4b75      	ldr	r3, [pc, #468]	; (800053c <fsm_automatic+0x29c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a73      	ldr	r2, [pc, #460]	; (800053c <fsm_automatic+0x29c>)
 800036e:	6013      	str	r3, [r2, #0]
					if (counterYellow1 == INIT){
 8000370:	4b72      	ldr	r3, [pc, #456]	; (800053c <fsm_automatic+0x29c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d106      	bne.n	8000386 <fsm_automatic+0xe6>
						counterYellow1 = AUTO_YELLOW;
 8000378:	4b71      	ldr	r3, [pc, #452]	; (8000540 <fsm_automatic+0x2a0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a6f      	ldr	r2, [pc, #444]	; (800053c <fsm_automatic+0x29c>)
 800037e:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_RED;
 8000380:	4b67      	ldr	r3, [pc, #412]	; (8000520 <fsm_automatic+0x280>)
 8000382:	2201      	movs	r2, #1
 8000384:	601a      	str	r2, [r3, #0]
					}
					setTimer1(100);
 8000386:	2064      	movs	r0, #100	; 0x64
 8000388:	f000 ffd0 	bl	800132c <setTimer1>
				}
				break;
 800038c:	e005      	b.n	800039a <fsm_automatic+0xfa>
			default:
				break;
 800038e:	bf00      	nop
 8000390:	e004      	b.n	800039c <fsm_automatic+0xfc>
				break;
 8000392:	bf00      	nop
 8000394:	e002      	b.n	800039c <fsm_automatic+0xfc>
				break;
 8000396:	bf00      	nop
 8000398:	e000      	b.n	800039c <fsm_automatic+0xfc>
				break;
 800039a:	bf00      	nop
		}

		// AUTO MODE 2
		switch (statusAUTO2){
 800039c:	4b69      	ldr	r3, [pc, #420]	; (8000544 <fsm_automatic+0x2a4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d86c      	bhi.n	800047e <fsm_automatic+0x1de>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <fsm_automatic+0x10c>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080003cb 	.word	0x080003cb
 80003b4:	08000407 	.word	0x08000407
 80003b8:	08000443 	.word	0x08000443
			case INIT:
				statusAUTO2 = STATE_GREEN;
 80003bc:	4b61      	ldr	r3, [pc, #388]	; (8000544 <fsm_automatic+0x2a4>)
 80003be:	2202      	movs	r2, #2
 80003c0:	601a      	str	r2, [r3, #0]
				setTimer2(100);
 80003c2:	2064      	movs	r0, #100	; 0x64
 80003c4:	f000 ffc6 	bl	8001354 <setTimer2>
				break;
 80003c8:	e060      	b.n	800048c <fsm_automatic+0x1ec>
			case STATE_RED:
				if (timer2_flag == 1){
 80003ca:	4b5f      	ldr	r3, [pc, #380]	; (8000548 <fsm_automatic+0x2a8>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d157      	bne.n	8000482 <fsm_automatic+0x1e2>
					enableRed2();
 80003d2:	f001 f9fd 	bl	80017d0 <enableRed2>
					led_buffer[1] = counterRed2;
 80003d6:	4b5d      	ldr	r3, [pc, #372]	; (800054c <fsm_automatic+0x2ac>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a54      	ldr	r2, [pc, #336]	; (800052c <fsm_automatic+0x28c>)
 80003dc:	6053      	str	r3, [r2, #4]
					counterRed2--;
 80003de:	4b5b      	ldr	r3, [pc, #364]	; (800054c <fsm_automatic+0x2ac>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	4a59      	ldr	r2, [pc, #356]	; (800054c <fsm_automatic+0x2ac>)
 80003e6:	6013      	str	r3, [r2, #0]
					if (counterRed2 == INIT){
 80003e8:	4b58      	ldr	r3, [pc, #352]	; (800054c <fsm_automatic+0x2ac>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d106      	bne.n	80003fe <fsm_automatic+0x15e>
						counterRed2 = AUTO_RED;
 80003f0:	4b4f      	ldr	r3, [pc, #316]	; (8000530 <fsm_automatic+0x290>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a55      	ldr	r2, [pc, #340]	; (800054c <fsm_automatic+0x2ac>)
 80003f6:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_GREEN;
 80003f8:	4b52      	ldr	r3, [pc, #328]	; (8000544 <fsm_automatic+0x2a4>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 80003fe:	2064      	movs	r0, #100	; 0x64
 8000400:	f000 ffa8 	bl	8001354 <setTimer2>
				}
				break;
 8000404:	e03d      	b.n	8000482 <fsm_automatic+0x1e2>
			case STATE_GREEN:
				if (timer2_flag == 1){
 8000406:	4b50      	ldr	r3, [pc, #320]	; (8000548 <fsm_automatic+0x2a8>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d13b      	bne.n	8000486 <fsm_automatic+0x1e6>
					enableGreen2();
 800040e:	f001 fa0b 	bl	8001828 <enableGreen2>
					led_buffer[1] = counterGreen2;
 8000412:	4b4f      	ldr	r3, [pc, #316]	; (8000550 <fsm_automatic+0x2b0>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a45      	ldr	r2, [pc, #276]	; (800052c <fsm_automatic+0x28c>)
 8000418:	6053      	str	r3, [r2, #4]
					counterGreen2--;
 800041a:	4b4d      	ldr	r3, [pc, #308]	; (8000550 <fsm_automatic+0x2b0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	4a4b      	ldr	r2, [pc, #300]	; (8000550 <fsm_automatic+0x2b0>)
 8000422:	6013      	str	r3, [r2, #0]
					if (counterGreen2 == INIT){
 8000424:	4b4a      	ldr	r3, [pc, #296]	; (8000550 <fsm_automatic+0x2b0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d106      	bne.n	800043a <fsm_automatic+0x19a>
						counterGreen2 = AUTO_GREEN;
 800042c:	4b42      	ldr	r3, [pc, #264]	; (8000538 <fsm_automatic+0x298>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a47      	ldr	r2, [pc, #284]	; (8000550 <fsm_automatic+0x2b0>)
 8000432:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_YELLOW;
 8000434:	4b43      	ldr	r3, [pc, #268]	; (8000544 <fsm_automatic+0x2a4>)
 8000436:	2203      	movs	r2, #3
 8000438:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f000 ff8a 	bl	8001354 <setTimer2>
				}
				break;
 8000440:	e021      	b.n	8000486 <fsm_automatic+0x1e6>
			case STATE_YELLOW:
				if (timer2_flag == 1){
 8000442:	4b41      	ldr	r3, [pc, #260]	; (8000548 <fsm_automatic+0x2a8>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d11f      	bne.n	800048a <fsm_automatic+0x1ea>
					enableYellow2();
 800044a:	f001 f9d7 	bl	80017fc <enableYellow2>
					led_buffer[1] = counterYellow2;
 800044e:	4b41      	ldr	r3, [pc, #260]	; (8000554 <fsm_automatic+0x2b4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a36      	ldr	r2, [pc, #216]	; (800052c <fsm_automatic+0x28c>)
 8000454:	6053      	str	r3, [r2, #4]
					counterYellow2--;
 8000456:	4b3f      	ldr	r3, [pc, #252]	; (8000554 <fsm_automatic+0x2b4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	4a3d      	ldr	r2, [pc, #244]	; (8000554 <fsm_automatic+0x2b4>)
 800045e:	6013      	str	r3, [r2, #0]
					if (counterYellow2 == INIT){
 8000460:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <fsm_automatic+0x2b4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d106      	bne.n	8000476 <fsm_automatic+0x1d6>
						counterYellow2 = AUTO_YELLOW;
 8000468:	4b35      	ldr	r3, [pc, #212]	; (8000540 <fsm_automatic+0x2a0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a39      	ldr	r2, [pc, #228]	; (8000554 <fsm_automatic+0x2b4>)
 800046e:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_RED;
 8000470:	4b34      	ldr	r3, [pc, #208]	; (8000544 <fsm_automatic+0x2a4>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 8000476:	2064      	movs	r0, #100	; 0x64
 8000478:	f000 ff6c 	bl	8001354 <setTimer2>
				}
				break;
 800047c:	e005      	b.n	800048a <fsm_automatic+0x1ea>
			default:
				break;
 800047e:	bf00      	nop
 8000480:	e004      	b.n	800048c <fsm_automatic+0x1ec>
				break;
 8000482:	bf00      	nop
 8000484:	e002      	b.n	800048c <fsm_automatic+0x1ec>
				break;
 8000486:	bf00      	nop
 8000488:	e000      	b.n	800048c <fsm_automatic+0x1ec>
				break;
 800048a:	bf00      	nop
		}

		// AUTO MODE 3 - DISPLAY WAITING TIME
		switch (statusAUTO3){
 800048c:	4b32      	ldr	r3, [pc, #200]	; (8000558 <fsm_automatic+0x2b8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b02      	cmp	r3, #2
 8000492:	d020      	beq.n	80004d6 <fsm_automatic+0x236>
 8000494:	2b02      	cmp	r3, #2
 8000496:	dc31      	bgt.n	80004fc <fsm_automatic+0x25c>
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <fsm_automatic+0x202>
 800049c:	2b01      	cmp	r3, #1
 800049e:	d007      	beq.n	80004b0 <fsm_automatic+0x210>
					statusAUTO3 = HIGH_DIGIT;
					setTimer3(50);
				}
				break;
			default:
				break;
 80004a0:	e02c      	b.n	80004fc <fsm_automatic+0x25c>
				statusAUTO3 = HIGH_DIGIT;
 80004a2:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <fsm_automatic+0x2b8>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80004a8:	2064      	movs	r0, #100	; 0x64
 80004aa:	f000 ff67 	bl	800137c <setTimer3>
				break;
 80004ae:	e02a      	b.n	8000506 <fsm_automatic+0x266>
				if (timer3_flag == 1){
 80004b0:	4b2a      	ldr	r3, [pc, #168]	; (800055c <fsm_automatic+0x2bc>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d123      	bne.n	8000500 <fsm_automatic+0x260>
					blinkDigit1(led_buffer[0], led_buffer[1]);
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <fsm_automatic+0x28c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1b      	ldr	r2, [pc, #108]	; (800052c <fsm_automatic+0x28c>)
 80004be:	6852      	ldr	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 fc00 	bl	8000cc8 <blinkDigit1>
					statusAUTO3 = LOW_DIGIT;
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <fsm_automatic+0x2b8>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 80004ce:	2032      	movs	r0, #50	; 0x32
 80004d0:	f000 ff54 	bl	800137c <setTimer3>
				break;
 80004d4:	e014      	b.n	8000500 <fsm_automatic+0x260>
				if (timer3_flag == 1){
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <fsm_automatic+0x2bc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d112      	bne.n	8000504 <fsm_automatic+0x264>
					blinkDigit2(led_buffer[0], led_buffer[1]);
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <fsm_automatic+0x28c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <fsm_automatic+0x28c>)
 80004e4:	6852      	ldr	r2, [r2, #4]
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fc27 	bl	8000d3c <blinkDigit2>
					statusAUTO3 = HIGH_DIGIT;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <fsm_automatic+0x2b8>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 80004f4:	2032      	movs	r0, #50	; 0x32
 80004f6:	f000 ff41 	bl	800137c <setTimer3>
				break;
 80004fa:	e003      	b.n	8000504 <fsm_automatic+0x264>
				break;
 80004fc:	bf00      	nop
 80004fe:	e002      	b.n	8000506 <fsm_automatic+0x266>
				break;
 8000500:	bf00      	nop
 8000502:	e000      	b.n	8000506 <fsm_automatic+0x266>
				break;
 8000504:	bf00      	nop
		}

		// CHANGE MODE
		switch(statusAUTO4){
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <fsm_automatic+0x2c0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b03      	cmp	r3, #3
 800050c:	d03e      	beq.n	800058c <fsm_automatic+0x2ec>
 800050e:	2b03      	cmp	r3, #3
 8000510:	dc4a      	bgt.n	80005a8 <fsm_automatic+0x308>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d026      	beq.n	8000564 <fsm_automatic+0x2c4>
 8000516:	2b02      	cmp	r3, #2
 8000518:	d02e      	beq.n	8000578 <fsm_automatic+0x2d8>
				if (isButtonPressed(BUTTON1) == 1)
					mode = MODE1;
				initVar();
				break;
			default:
				break;
 800051a:	e045      	b.n	80005a8 <fsm_automatic+0x308>
 800051c:	20000094 	.word	0x20000094
 8000520:	20000098 	.word	0x20000098
 8000524:	200000f4 	.word	0x200000f4
 8000528:	200000d8 	.word	0x200000d8
 800052c:	2000008c 	.word	0x2000008c
 8000530:	200000cc 	.word	0x200000cc
 8000534:	200000dc 	.word	0x200000dc
 8000538:	200000d0 	.word	0x200000d0
 800053c:	200000e0 	.word	0x200000e0
 8000540:	200000d4 	.word	0x200000d4
 8000544:	2000009c 	.word	0x2000009c
 8000548:	200000fc 	.word	0x200000fc
 800054c:	200000e4 	.word	0x200000e4
 8000550:	200000e8 	.word	0x200000e8
 8000554:	200000ec 	.word	0x200000ec
 8000558:	200000a0 	.word	0x200000a0
 800055c:	20000104 	.word	0x20000104
 8000560:	200000a4 	.word	0x200000a4
				if (isButtonPressed(BUTTON1) == 1)
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff fdf1 	bl	800014c <isButtonPressed>
 800056a:	4603      	mov	r3, r0
 800056c:	2b01      	cmp	r3, #1
 800056e:	d11d      	bne.n	80005ac <fsm_automatic+0x30c>
					mode = MODE2;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <fsm_automatic+0x318>)
 8000572:	2202      	movs	r2, #2
 8000574:	601a      	str	r2, [r3, #0]
				break;
 8000576:	e019      	b.n	80005ac <fsm_automatic+0x30c>
				if (isButtonPressed(BUTTON1) == 1)
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff fde7 	bl	800014c <isButtonPressed>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d115      	bne.n	80005b0 <fsm_automatic+0x310>
					mode = MODE3;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <fsm_automatic+0x318>)
 8000586:	2203      	movs	r2, #3
 8000588:	601a      	str	r2, [r3, #0]
				break;
 800058a:	e011      	b.n	80005b0 <fsm_automatic+0x310>
				if (isButtonPressed(BUTTON1) == 1)
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff fddd 	bl	800014c <isButtonPressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b01      	cmp	r3, #1
 8000596:	d102      	bne.n	800059e <fsm_automatic+0x2fe>
					mode = MODE1;
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <fsm_automatic+0x318>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
				initVar();
 800059e:	f000 fa3f 	bl	8000a20 <initVar>
				break;
 80005a2:	e006      	b.n	80005b2 <fsm_automatic+0x312>
		}
	}
 80005a4:	bf00      	nop
 80005a6:	e004      	b.n	80005b2 <fsm_automatic+0x312>
				break;
 80005a8:	bf00      	nop
 80005aa:	e002      	b.n	80005b2 <fsm_automatic+0x312>
				break;
 80005ac:	bf00      	nop
 80005ae:	e000      	b.n	80005b2 <fsm_automatic+0x312>
				break;
 80005b0:	bf00      	nop
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000094 	.word	0x20000094

080005bc <fsm_manual>:
 *      Author: ASUS
 */

#include "fsm_manual.h"

void fsm_manual(void) { // START IN MANUAL MODE
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

    // CONFIG RED (MODE2)
    if (mode == MODE2) {
 80005c0:	4b9e      	ldr	r3, [pc, #632]	; (800083c <fsm_manual+0x280>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	f040 809f 	bne.w	8000708 <fsm_manual+0x14c>
        // Blink LED RED
        switch (statusMODE2_1) {
 80005ca:	4b9d      	ldr	r3, [pc, #628]	; (8000840 <fsm_manual+0x284>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <fsm_manual+0x1c>
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d007      	beq.n	80005e6 <fsm_manual+0x2a>
                    toggleREDs();
                    setTimer4(25);
                }
                break;
            default:
                break;
 80005d6:	e010      	b.n	80005fa <fsm_manual+0x3e>
                statusMODE2_1 = TOGGLE;
 80005d8:	4b99      	ldr	r3, [pc, #612]	; (8000840 <fsm_manual+0x284>)
 80005da:	2201      	movs	r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
                setTimer4(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fee0 	bl	80013a4 <setTimer4>
                break;
 80005e4:	e009      	b.n	80005fa <fsm_manual+0x3e>
                if (timer4_flag == 1) {
 80005e6:	4b97      	ldr	r3, [pc, #604]	; (8000844 <fsm_manual+0x288>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d104      	bne.n	80005f8 <fsm_manual+0x3c>
                    toggleREDs();
 80005ee:	f001 f931 	bl	8001854 <toggleREDs>
                    setTimer4(25);
 80005f2:	2019      	movs	r0, #25
 80005f4:	f000 fed6 	bl	80013a4 <setTimer4>
                break;
 80005f8:	bf00      	nop
        }

        // Display Digit Red and Value
        switch (statusMODE2_2) {
 80005fa:	4b93      	ldr	r3, [pc, #588]	; (8000848 <fsm_manual+0x28c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d020      	beq.n	8000644 <fsm_manual+0x88>
 8000602:	2b02      	cmp	r3, #2
 8000604:	dc31      	bgt.n	800066a <fsm_manual+0xae>
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <fsm_manual+0x54>
 800060a:	2b01      	cmp	r3, #1
 800060c:	d007      	beq.n	800061e <fsm_manual+0x62>
                    statusMODE2_2 = HIGH_DIGIT;
                    setTimer5(25);
                }
                break;
            default:
                break;
 800060e:	e02c      	b.n	800066a <fsm_manual+0xae>
                statusMODE2_2 = HIGH_DIGIT;
 8000610:	4b8d      	ldr	r3, [pc, #564]	; (8000848 <fsm_manual+0x28c>)
 8000612:	2201      	movs	r2, #1
 8000614:	601a      	str	r2, [r3, #0]
                setTimer5(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fed8 	bl	80013cc <setTimer5>
                break;
 800061c:	e02a      	b.n	8000674 <fsm_manual+0xb8>
                if (timer5_flag == 1) {
 800061e:	4b8b      	ldr	r3, [pc, #556]	; (800084c <fsm_manual+0x290>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d123      	bne.n	800066e <fsm_manual+0xb2>
                    blinkDigit1(mode, AUTO_RED);
 8000626:	4b85      	ldr	r3, [pc, #532]	; (800083c <fsm_manual+0x280>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a89      	ldr	r2, [pc, #548]	; (8000850 <fsm_manual+0x294>)
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fb49 	bl	8000cc8 <blinkDigit1>
                    statusMODE2_2 = LOW_DIGIT;
 8000636:	4b84      	ldr	r3, [pc, #528]	; (8000848 <fsm_manual+0x28c>)
 8000638:	2202      	movs	r2, #2
 800063a:	601a      	str	r2, [r3, #0]
                    setTimer5(25);
 800063c:	2019      	movs	r0, #25
 800063e:	f000 fec5 	bl	80013cc <setTimer5>
                break;
 8000642:	e014      	b.n	800066e <fsm_manual+0xb2>
                if (timer5_flag == 1) {
 8000644:	4b81      	ldr	r3, [pc, #516]	; (800084c <fsm_manual+0x290>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d112      	bne.n	8000672 <fsm_manual+0xb6>
                    blinkDigit2(mode, AUTO_RED);
 800064c:	4b7b      	ldr	r3, [pc, #492]	; (800083c <fsm_manual+0x280>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a7f      	ldr	r2, [pc, #508]	; (8000850 <fsm_manual+0x294>)
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fb70 	bl	8000d3c <blinkDigit2>
                    statusMODE2_2 = HIGH_DIGIT;
 800065c:	4b7a      	ldr	r3, [pc, #488]	; (8000848 <fsm_manual+0x28c>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
                    setTimer5(25);
 8000662:	2019      	movs	r0, #25
 8000664:	f000 feb2 	bl	80013cc <setTimer5>
                break;
 8000668:	e003      	b.n	8000672 <fsm_manual+0xb6>
                break;
 800066a:	bf00      	nop
 800066c:	e002      	b.n	8000674 <fsm_manual+0xb8>
                break;
 800066e:	bf00      	nop
 8000670:	e000      	b.n	8000674 <fsm_manual+0xb8>
                break;
 8000672:	bf00      	nop
        }

        // Change time for mode
        switch (statusMODE2_3) {
 8000674:	4b77      	ldr	r3, [pc, #476]	; (8000854 <fsm_manual+0x298>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d031      	beq.n	80006e0 <fsm_manual+0x124>
 800067c:	2b04      	cmp	r3, #4
 800067e:	dc35      	bgt.n	80006ec <fsm_manual+0x130>
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <fsm_manual+0xce>
 8000684:	2b02      	cmp	r3, #2
 8000686:	d00f      	beq.n	80006a8 <fsm_manual+0xec>
            case SAVE:
                mode = MODE1;
                initVar();
                break;
            default:
                break;
 8000688:	e030      	b.n	80006ec <fsm_manual+0x130>
                if (isButtonPressed(BUTTON2) == 1) {
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff fd5e 	bl	800014c <isButtonPressed>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d12c      	bne.n	80006f0 <fsm_manual+0x134>
                    statusMODE2_3 = INCREASE;
 8000696:	4b6f      	ldr	r3, [pc, #444]	; (8000854 <fsm_manual+0x298>)
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
                    AUTO_RED++;
 800069c:	4b6c      	ldr	r3, [pc, #432]	; (8000850 <fsm_manual+0x294>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a6b      	ldr	r2, [pc, #428]	; (8000850 <fsm_manual+0x294>)
 80006a4:	6013      	str	r3, [r2, #0]
                break;
 80006a6:	e023      	b.n	80006f0 <fsm_manual+0x134>
                if (isButtonPressed(BUTTON2) == 1) {
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fd4f 	bl	800014c <isButtonPressed>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d10b      	bne.n	80006cc <fsm_manual+0x110>
                    AUTO_RED += 1;
 80006b4:	4b66      	ldr	r3, [pc, #408]	; (8000850 <fsm_manual+0x294>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a65      	ldr	r2, [pc, #404]	; (8000850 <fsm_manual+0x294>)
 80006bc:	6013      	str	r3, [r2, #0]
                    if (AUTO_RED > UPPER_BOUND) AUTO_RED = UPPER_BOUND;
 80006be:	4b64      	ldr	r3, [pc, #400]	; (8000850 <fsm_manual+0x294>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b63      	cmp	r3, #99	; 0x63
 80006c4:	dd02      	ble.n	80006cc <fsm_manual+0x110>
 80006c6:	4b62      	ldr	r3, [pc, #392]	; (8000850 <fsm_manual+0x294>)
 80006c8:	2263      	movs	r2, #99	; 0x63
 80006ca:	601a      	str	r2, [r3, #0]
                if (isButtonPressed(BUTTON3) == 1) {
 80006cc:	2002      	movs	r0, #2
 80006ce:	f7ff fd3d 	bl	800014c <isButtonPressed>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d10d      	bne.n	80006f4 <fsm_manual+0x138>
                    statusMODE2_3 = SAVE;
 80006d8:	4b5e      	ldr	r3, [pc, #376]	; (8000854 <fsm_manual+0x298>)
 80006da:	2204      	movs	r2, #4
 80006dc:	601a      	str	r2, [r3, #0]
                break;
 80006de:	e009      	b.n	80006f4 <fsm_manual+0x138>
                mode = MODE1;
 80006e0:	4b56      	ldr	r3, [pc, #344]	; (800083c <fsm_manual+0x280>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
                initVar();
 80006e6:	f000 f99b 	bl	8000a20 <initVar>
                break;
 80006ea:	e004      	b.n	80006f6 <fsm_manual+0x13a>
                break;
 80006ec:	bf00      	nop
 80006ee:	e002      	b.n	80006f6 <fsm_manual+0x13a>
                break;
 80006f0:	bf00      	nop
 80006f2:	e000      	b.n	80006f6 <fsm_manual+0x13a>
                break;
 80006f4:	bf00      	nop
        }

        // Continue to MODE3
        if (isButtonPressed(BUTTON1) == 1) {
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff fd28 	bl	800014c <isButtonPressed>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d102      	bne.n	8000708 <fsm_manual+0x14c>
            mode = MODE3;
 8000702:	4b4e      	ldr	r3, [pc, #312]	; (800083c <fsm_manual+0x280>)
 8000704:	2203      	movs	r2, #3
 8000706:	601a      	str	r2, [r3, #0]
        }
    }

    // CONFIG GREEN (MODE3)
    if (mode == MODE3) {
 8000708:	4b4c      	ldr	r3, [pc, #304]	; (800083c <fsm_manual+0x280>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b03      	cmp	r3, #3
 800070e:	f040 80b9 	bne.w	8000884 <fsm_manual+0x2c8>
        // Blink LED GREEN
        switch (statusMODE3_1) {
 8000712:	4b51      	ldr	r3, [pc, #324]	; (8000858 <fsm_manual+0x29c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <fsm_manual+0x164>
 800071a:	2b01      	cmp	r3, #1
 800071c:	d007      	beq.n	800072e <fsm_manual+0x172>
                    toggleGREENs();
                    setTimer6(25);
                }
                break;
            default:
                break;
 800071e:	e010      	b.n	8000742 <fsm_manual+0x186>
                statusMODE3_1 = TOGGLE;
 8000720:	4b4d      	ldr	r3, [pc, #308]	; (8000858 <fsm_manual+0x29c>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
                setTimer6(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fe64 	bl	80013f4 <setTimer6>
                break;
 800072c:	e009      	b.n	8000742 <fsm_manual+0x186>
                if (timer6_flag == 1) {
 800072e:	4b4b      	ldr	r3, [pc, #300]	; (800085c <fsm_manual+0x2a0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d104      	bne.n	8000740 <fsm_manual+0x184>
                    toggleGREENs();
 8000736:	f001 f8af 	bl	8001898 <toggleGREENs>
                    setTimer6(25);
 800073a:	2019      	movs	r0, #25
 800073c:	f000 fe5a 	bl	80013f4 <setTimer6>
                break;
 8000740:	bf00      	nop
        }

        // Display Digit Green and Value
        switch (statusMODE3_2) {
 8000742:	4b47      	ldr	r3, [pc, #284]	; (8000860 <fsm_manual+0x2a4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d020      	beq.n	800078c <fsm_manual+0x1d0>
 800074a:	2b02      	cmp	r3, #2
 800074c:	dc31      	bgt.n	80007b2 <fsm_manual+0x1f6>
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <fsm_manual+0x19c>
 8000752:	2b01      	cmp	r3, #1
 8000754:	d007      	beq.n	8000766 <fsm_manual+0x1aa>
                    statusMODE3_2 = HIGH_DIGIT;
                    setTimer7(25);
                }
                break;
            default:
                break;
 8000756:	e02c      	b.n	80007b2 <fsm_manual+0x1f6>
                statusMODE3_2 = HIGH_DIGIT;
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <fsm_manual+0x2a4>)
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
                setTimer7(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f000 fe5c 	bl	800141c <setTimer7>
                break;
 8000764:	e02a      	b.n	80007bc <fsm_manual+0x200>
                if (timer7_flag == 1) {
 8000766:	4b3f      	ldr	r3, [pc, #252]	; (8000864 <fsm_manual+0x2a8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d123      	bne.n	80007b6 <fsm_manual+0x1fa>
                    blinkDigit1(mode, AUTO_GREEN);
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <fsm_manual+0x280>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a3d      	ldr	r2, [pc, #244]	; (8000868 <fsm_manual+0x2ac>)
 8000774:	6812      	ldr	r2, [r2, #0]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f000 faa5 	bl	8000cc8 <blinkDigit1>
                    statusMODE3_2 = LOW_DIGIT;
 800077e:	4b38      	ldr	r3, [pc, #224]	; (8000860 <fsm_manual+0x2a4>)
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
                    setTimer7(25);
 8000784:	2019      	movs	r0, #25
 8000786:	f000 fe49 	bl	800141c <setTimer7>
                break;
 800078a:	e014      	b.n	80007b6 <fsm_manual+0x1fa>
                if (timer7_flag == 1) {
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <fsm_manual+0x2a8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d112      	bne.n	80007ba <fsm_manual+0x1fe>
                    blinkDigit2(mode, AUTO_GREEN);
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <fsm_manual+0x280>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a33      	ldr	r2, [pc, #204]	; (8000868 <fsm_manual+0x2ac>)
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 facc 	bl	8000d3c <blinkDigit2>
                    statusMODE3_2 = HIGH_DIGIT;
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <fsm_manual+0x2a4>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
                    setTimer7(25);
 80007aa:	2019      	movs	r0, #25
 80007ac:	f000 fe36 	bl	800141c <setTimer7>
                break;
 80007b0:	e003      	b.n	80007ba <fsm_manual+0x1fe>
                break;
 80007b2:	bf00      	nop
 80007b4:	e002      	b.n	80007bc <fsm_manual+0x200>
                break;
 80007b6:	bf00      	nop
 80007b8:	e000      	b.n	80007bc <fsm_manual+0x200>
                break;
 80007ba:	bf00      	nop
        }

        // Change time for mode
        switch (statusMODE3_3) {
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <fsm_manual+0x2b0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d031      	beq.n	8000828 <fsm_manual+0x26c>
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	dc35      	bgt.n	8000834 <fsm_manual+0x278>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <fsm_manual+0x216>
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d00f      	beq.n	80007f0 <fsm_manual+0x234>
            case SAVE:
                mode = MODE1;
                initVar();
                break;
            default:
                break;
 80007d0:	e030      	b.n	8000834 <fsm_manual+0x278>
                if (isButtonPressed(BUTTON2) == 1) {
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fcba 	bl	800014c <isButtonPressed>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d12c      	bne.n	8000838 <fsm_manual+0x27c>
                    statusMODE3_3 = INCREASE;
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <fsm_manual+0x2b0>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
                    AUTO_GREEN++;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <fsm_manual+0x2ac>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <fsm_manual+0x2ac>)
 80007ec:	6013      	str	r3, [r2, #0]
                break;
 80007ee:	e023      	b.n	8000838 <fsm_manual+0x27c>
                if (isButtonPressed(BUTTON2) == 1) {
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fcab 	bl	800014c <isButtonPressed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d10b      	bne.n	8000814 <fsm_manual+0x258>
                    AUTO_GREEN += 1;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <fsm_manual+0x2ac>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a19      	ldr	r2, [pc, #100]	; (8000868 <fsm_manual+0x2ac>)
 8000804:	6013      	str	r3, [r2, #0]
                    if (AUTO_GREEN > UPPER_BOUND) AUTO_GREEN = UPPER_BOUND;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <fsm_manual+0x2ac>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b63      	cmp	r3, #99	; 0x63
 800080c:	dd02      	ble.n	8000814 <fsm_manual+0x258>
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <fsm_manual+0x2ac>)
 8000810:	2263      	movs	r2, #99	; 0x63
 8000812:	601a      	str	r2, [r3, #0]
                if (isButtonPressed(BUTTON3) == 1) {
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff fc99 	bl	800014c <isButtonPressed>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d127      	bne.n	8000870 <fsm_manual+0x2b4>
                    statusMODE3_3 = SAVE;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <fsm_manual+0x2b0>)
 8000822:	2204      	movs	r2, #4
 8000824:	601a      	str	r2, [r3, #0]
                break;
 8000826:	e023      	b.n	8000870 <fsm_manual+0x2b4>
                mode = MODE1;
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <fsm_manual+0x280>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
                initVar();
 800082e:	f000 f8f7 	bl	8000a20 <initVar>
                break;
 8000832:	e01e      	b.n	8000872 <fsm_manual+0x2b6>
                break;
 8000834:	bf00      	nop
 8000836:	e01c      	b.n	8000872 <fsm_manual+0x2b6>
                break;
 8000838:	bf00      	nop
 800083a:	e01a      	b.n	8000872 <fsm_manual+0x2b6>
 800083c:	20000094 	.word	0x20000094
 8000840:	200000a8 	.word	0x200000a8
 8000844:	2000010c 	.word	0x2000010c
 8000848:	200000ac 	.word	0x200000ac
 800084c:	20000114 	.word	0x20000114
 8000850:	200000cc 	.word	0x200000cc
 8000854:	200000b0 	.word	0x200000b0
 8000858:	200000b4 	.word	0x200000b4
 800085c:	2000011c 	.word	0x2000011c
 8000860:	200000b8 	.word	0x200000b8
 8000864:	20000124 	.word	0x20000124
 8000868:	200000d0 	.word	0x200000d0
 800086c:	200000bc 	.word	0x200000bc
                break;
 8000870:	bf00      	nop
        }

        // Continue to MODE4
        if (isButtonPressed(BUTTON1) == 1) {
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fc6a 	bl	800014c <isButtonPressed>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d102      	bne.n	8000884 <fsm_manual+0x2c8>
            mode = MODE4;
 800087e:	4b54      	ldr	r3, [pc, #336]	; (80009d0 <fsm_manual+0x414>)
 8000880:	2204      	movs	r2, #4
 8000882:	601a      	str	r2, [r3, #0]
        }
    }

    // CONFIG YELLOW (MODE4)
    if (mode == MODE4) {
 8000884:	4b52      	ldr	r3, [pc, #328]	; (80009d0 <fsm_manual+0x414>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b04      	cmp	r3, #4
 800088a:	f040 809f 	bne.w	80009cc <fsm_manual+0x410>
        // Blink LED YELLOW
        switch (statusMODE4_1) {
 800088e:	4b51      	ldr	r3, [pc, #324]	; (80009d4 <fsm_manual+0x418>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <fsm_manual+0x2e0>
 8000896:	2b01      	cmp	r3, #1
 8000898:	d007      	beq.n	80008aa <fsm_manual+0x2ee>
                    toggleYELLOWs();
                    setTimer8(25);
                }
                break;
            default:
                break;
 800089a:	e010      	b.n	80008be <fsm_manual+0x302>
                statusMODE4_1 = TOGGLE;
 800089c:	4b4d      	ldr	r3, [pc, #308]	; (80009d4 <fsm_manual+0x418>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
                setTimer8(1);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f000 fdce 	bl	8001444 <setTimer8>
                break;
 80008a8:	e009      	b.n	80008be <fsm_manual+0x302>
                if (timer8_flag == 1) {
 80008aa:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <fsm_manual+0x41c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d104      	bne.n	80008bc <fsm_manual+0x300>
                    toggleYELLOWs();
 80008b2:	f001 f813 	bl	80018dc <toggleYELLOWs>
                    setTimer8(25);
 80008b6:	2019      	movs	r0, #25
 80008b8:	f000 fdc4 	bl	8001444 <setTimer8>
                break;
 80008bc:	bf00      	nop
        }

        // Display Digit Yellow and Value
        switch (statusMODE4_2) {
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <fsm_manual+0x420>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d020      	beq.n	8000908 <fsm_manual+0x34c>
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	dc31      	bgt.n	800092e <fsm_manual+0x372>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <fsm_manual+0x318>
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d007      	beq.n	80008e2 <fsm_manual+0x326>
                    statusMODE4_2 = HIGH_DIGIT;
                    setTimer9(25);
                }
                break;
            default:
                break;
 80008d2:	e02c      	b.n	800092e <fsm_manual+0x372>
                statusMODE4_2 = HIGH_DIGIT;
 80008d4:	4b41      	ldr	r3, [pc, #260]	; (80009dc <fsm_manual+0x420>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	601a      	str	r2, [r3, #0]
                setTimer9(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fdc6 	bl	800146c <setTimer9>
                break;
 80008e0:	e02a      	b.n	8000938 <fsm_manual+0x37c>
                if (timer9_flag == 1) {
 80008e2:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <fsm_manual+0x424>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d123      	bne.n	8000932 <fsm_manual+0x376>
                    blinkDigit1(mode, AUTO_YELLOW);
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <fsm_manual+0x414>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a3d      	ldr	r2, [pc, #244]	; (80009e4 <fsm_manual+0x428>)
 80008f0:	6812      	ldr	r2, [r2, #0]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f9e7 	bl	8000cc8 <blinkDigit1>
                    statusMODE4_2 = LOW_DIGIT;
 80008fa:	4b38      	ldr	r3, [pc, #224]	; (80009dc <fsm_manual+0x420>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	601a      	str	r2, [r3, #0]
                    setTimer9(25);
 8000900:	2019      	movs	r0, #25
 8000902:	f000 fdb3 	bl	800146c <setTimer9>
                break;
 8000906:	e014      	b.n	8000932 <fsm_manual+0x376>
                if (timer9_flag == 1) {
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <fsm_manual+0x424>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d112      	bne.n	8000936 <fsm_manual+0x37a>
                    blinkDigit2(mode, AUTO_YELLOW);
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <fsm_manual+0x414>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <fsm_manual+0x428>)
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fa0e 	bl	8000d3c <blinkDigit2>
                    statusMODE4_2 = HIGH_DIGIT;
 8000920:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <fsm_manual+0x420>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
                    setTimer9(25);
 8000926:	2019      	movs	r0, #25
 8000928:	f000 fda0 	bl	800146c <setTimer9>
                break;
 800092c:	e003      	b.n	8000936 <fsm_manual+0x37a>
                break;
 800092e:	bf00      	nop
 8000930:	e002      	b.n	8000938 <fsm_manual+0x37c>
                break;
 8000932:	bf00      	nop
 8000934:	e000      	b.n	8000938 <fsm_manual+0x37c>
                break;
 8000936:	bf00      	nop
        }

        // Change time for mode
        switch (statusMODE4_3) {
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <fsm_manual+0x42c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b04      	cmp	r3, #4
 800093e:	d031      	beq.n	80009a4 <fsm_manual+0x3e8>
 8000940:	2b04      	cmp	r3, #4
 8000942:	dc35      	bgt.n	80009b0 <fsm_manual+0x3f4>
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <fsm_manual+0x392>
 8000948:	2b02      	cmp	r3, #2
 800094a:	d00f      	beq.n	800096c <fsm_manual+0x3b0>
            case SAVE:
                mode = MODE1;
                initVar();
                break;
            default:
                break;
 800094c:	e030      	b.n	80009b0 <fsm_manual+0x3f4>
                if (isButtonPressed(BUTTON2) == 1) {
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff fbfc 	bl	800014c <isButtonPressed>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d12c      	bne.n	80009b4 <fsm_manual+0x3f8>
                    statusMODE4_3 = INCREASE;
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <fsm_manual+0x42c>)
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
                    AUTO_YELLOW++;
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <fsm_manual+0x428>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <fsm_manual+0x428>)
 8000968:	6013      	str	r3, [r2, #0]
                break;
 800096a:	e023      	b.n	80009b4 <fsm_manual+0x3f8>
                if (isButtonPressed(BUTTON2) == 1) {
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff fbed 	bl	800014c <isButtonPressed>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10b      	bne.n	8000990 <fsm_manual+0x3d4>
                    AUTO_YELLOW += 1;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <fsm_manual+0x428>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <fsm_manual+0x428>)
 8000980:	6013      	str	r3, [r2, #0]
                    if (AUTO_YELLOW > UPPER_BOUND) AUTO_YELLOW = UPPER_BOUND;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <fsm_manual+0x428>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b63      	cmp	r3, #99	; 0x63
 8000988:	dd02      	ble.n	8000990 <fsm_manual+0x3d4>
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <fsm_manual+0x428>)
 800098c:	2263      	movs	r2, #99	; 0x63
 800098e:	601a      	str	r2, [r3, #0]
                if (isButtonPressed(BUTTON3) == 1) {
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fbdb 	bl	800014c <isButtonPressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10d      	bne.n	80009b8 <fsm_manual+0x3fc>
                    statusMODE4_3 = SAVE;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <fsm_manual+0x42c>)
 800099e:	2204      	movs	r2, #4
 80009a0:	601a      	str	r2, [r3, #0]
                break;
 80009a2:	e009      	b.n	80009b8 <fsm_manual+0x3fc>
                mode = MODE1;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <fsm_manual+0x414>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
                initVar();
 80009aa:	f000 f839 	bl	8000a20 <initVar>
                break;
 80009ae:	e004      	b.n	80009ba <fsm_manual+0x3fe>
                break;
 80009b0:	bf00      	nop
 80009b2:	e002      	b.n	80009ba <fsm_manual+0x3fe>
                break;
 80009b4:	bf00      	nop
 80009b6:	e000      	b.n	80009ba <fsm_manual+0x3fe>
                break;
 80009b8:	bf00      	nop
        }

        // Return to MODE1
        if (isButtonPressed(BUTTON1) == 1) {
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fbc6 	bl	800014c <isButtonPressed>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d102      	bne.n	80009cc <fsm_manual+0x410>
            mode = MODE1;
 80009c6:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <fsm_manual+0x414>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
        }
    }
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000094 	.word	0x20000094
 80009d4:	200000c0 	.word	0x200000c0
 80009d8:	2000012c 	.word	0x2000012c
 80009dc:	200000c4 	.word	0x200000c4
 80009e0:	20000134 	.word	0x20000134
 80009e4:	200000d4 	.word	0x200000d4
 80009e8:	200000c8 	.word	0x200000c8

080009ec <initWaitingTime>:
int counterGreen2 = 0;
int counterYellow2 = 0;

/*------------------------------- Function Implementations -------------------------------*/

void initWaitingTime(void) {
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
    AUTO_GREEN = 2;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <initWaitingTime+0x28>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
    AUTO_YELLOW = 1;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <initWaitingTime+0x2c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
    AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <initWaitingTime+0x28>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <initWaitingTime+0x2c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <initWaitingTime+0x30>)
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200000d0 	.word	0x200000d0
 8000a18:	200000d4 	.word	0x200000d4
 8000a1c:	200000cc 	.word	0x200000cc

08000a20 <initVar>:

void initVar(void) {
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
    mode = MODE1;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <initVar+0x90>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]

    // Initialize status variables for Automatic Mode (MODE 1)
    statusAUTO1 = INIT;
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <initVar+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
    statusAUTO2 = INIT;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <initVar+0x98>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
    statusAUTO3 = INIT;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <initVar+0x9c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
    statusAUTO4 = INIT;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <initVar+0xa0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]

    // Initialize status variables for Manual Mode (MODE 2)
    statusMODE2_1 = INIT;
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <initVar+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
    statusMODE2_2 = INIT;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <initVar+0xa8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
    statusMODE2_3 = INIT;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <initVar+0xac>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]

    // Initialize status variables for Manual Mode (MODE 3)
    statusMODE3_1 = INIT;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <initVar+0xb0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
    statusMODE3_2 = INIT;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <initVar+0xb4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
    statusMODE3_3 = INIT;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <initVar+0xb8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]

    // Initialize status variables for Manual Mode (MODE 4)
    statusMODE4_1 = INIT;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <initVar+0xbc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
    statusMODE4_2 = INIT;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <initVar+0xc0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
    statusMODE4_3 = INIT;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <initVar+0xc4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]

    // Initialize counters for each traffic light side
    counterRed1 = AUTO_RED;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <initVar+0xc8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <initVar+0xcc>)
 8000a7e:	6013      	str	r3, [r2, #0]
    counterGreen1 = AUTO_GREEN;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <initVar+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <initVar+0xd4>)
 8000a86:	6013      	str	r3, [r2, #0]
    counterYellow1 = AUTO_YELLOW;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <initVar+0xd8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <initVar+0xdc>)
 8000a8e:	6013      	str	r3, [r2, #0]

    counterRed2 = AUTO_RED;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <initVar+0xc8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1a      	ldr	r2, [pc, #104]	; (8000b00 <initVar+0xe0>)
 8000a96:	6013      	str	r3, [r2, #0]
    counterGreen2 = AUTO_GREEN;
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <initVar+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <initVar+0xe4>)
 8000a9e:	6013      	str	r3, [r2, #0]
    counterYellow2 = AUTO_YELLOW;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <initVar+0xd8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <initVar+0xe8>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20000094 	.word	0x20000094
 8000ab4:	20000098 	.word	0x20000098
 8000ab8:	2000009c 	.word	0x2000009c
 8000abc:	200000a0 	.word	0x200000a0
 8000ac0:	200000a4 	.word	0x200000a4
 8000ac4:	200000a8 	.word	0x200000a8
 8000ac8:	200000ac 	.word	0x200000ac
 8000acc:	200000b0 	.word	0x200000b0
 8000ad0:	200000b4 	.word	0x200000b4
 8000ad4:	200000b8 	.word	0x200000b8
 8000ad8:	200000bc 	.word	0x200000bc
 8000adc:	200000c0 	.word	0x200000c0
 8000ae0:	200000c4 	.word	0x200000c4
 8000ae4:	200000c8 	.word	0x200000c8
 8000ae8:	200000cc 	.word	0x200000cc
 8000aec:	200000d8 	.word	0x200000d8
 8000af0:	200000d0 	.word	0x200000d0
 8000af4:	200000dc 	.word	0x200000dc
 8000af8:	200000d4 	.word	0x200000d4
 8000afc:	200000e0 	.word	0x200000e0
 8000b00:	200000e4 	.word	0x200000e4
 8000b04:	200000e8 	.word	0x200000e8
 8000b08:	200000ec 	.word	0x200000ec

08000b0c <display7SEG1>:
		, 0x02 //6
		, 0x78 //7
		, 0x00 //8
		, 0x10 /*9*/};

void display7SEG1(int num){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, ((sevenSegTable[num]>>0)&0x01));
 8000b14:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <display7SEG1+0xd0>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	2101      	movs	r1, #1
 8000b26:	482e      	ldr	r0, [pc, #184]	; (8000be0 <display7SEG1+0xd4>)
 8000b28:	f001 fa21 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, ((sevenSegTable[num]>>1)&0x01));
 8000b2c:	4a2b      	ldr	r2, [pc, #172]	; (8000bdc <display7SEG1+0xd0>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2102      	movs	r1, #2
 8000b42:	4827      	ldr	r0, [pc, #156]	; (8000be0 <display7SEG1+0xd4>)
 8000b44:	f001 fa13 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, ((sevenSegTable[num]>>2)&0x01));
 8000b48:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <display7SEG1+0xd0>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4820      	ldr	r0, [pc, #128]	; (8000be0 <display7SEG1+0xd4>)
 8000b60:	f001 fa05 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, ((sevenSegTable[num]>>3)&0x01));
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <display7SEG1+0xd0>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4819      	ldr	r0, [pc, #100]	; (8000be0 <display7SEG1+0xd4>)
 8000b7c:	f001 f9f7 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, ((sevenSegTable[num]>>4)&0x01));
 8000b80:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <display7SEG1+0xd0>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	091b      	lsrs	r3, r3, #4
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	2110      	movs	r1, #16
 8000b96:	4812      	ldr	r0, [pc, #72]	; (8000be0 <display7SEG1+0xd4>)
 8000b98:	f001 f9e9 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F0_GPIO_Port, F0_Pin, ((sevenSegTable[num]>>5)&0x01));
 8000b9c:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <display7SEG1+0xd0>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	095b      	lsrs	r3, r3, #5
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <display7SEG1+0xd4>)
 8000bb4:	f001 f9db 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, ((sevenSegTable[num]>>6)&0x01));
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <display7SEG1+0xd0>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	099b      	lsrs	r3, r3, #6
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <display7SEG1+0xd4>)
 8000bd0:	f001 f9cd 	bl	8001f6e <HAL_GPIO_WritePin>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	08002fe8 	.word	0x08002fe8
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <display7SEG2>:

void display7SEG2(int num){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, ((sevenSegTable[num]>>0)&0x01));
 8000bec:	4a34      	ldr	r2, [pc, #208]	; (8000cc0 <display7SEG2+0xdc>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	4831      	ldr	r0, [pc, #196]	; (8000cc4 <display7SEG2+0xe0>)
 8000c00:	f001 f9b5 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, ((sevenSegTable[num]>>1)&0x01));
 8000c04:	4a2e      	ldr	r2, [pc, #184]	; (8000cc0 <display7SEG2+0xdc>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	085b      	lsrs	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1c:	4829      	ldr	r0, [pc, #164]	; (8000cc4 <display7SEG2+0xe0>)
 8000c1e:	f001 f9a6 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, ((sevenSegTable[num]>>2)&0x01));
 8000c22:	4a27      	ldr	r2, [pc, #156]	; (8000cc0 <display7SEG2+0xdc>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3a:	4822      	ldr	r0, [pc, #136]	; (8000cc4 <display7SEG2+0xe0>)
 8000c3c:	f001 f997 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, ((sevenSegTable[num]>>3)&0x01));
 8000c40:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <display7SEG2+0xdc>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c58:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <display7SEG2+0xe0>)
 8000c5a:	f001 f988 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, ((sevenSegTable[num]>>4)&0x01));
 8000c5e:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <display7SEG2+0xdc>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c76:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <display7SEG2+0xe0>)
 8000c78:	f001 f979 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, ((sevenSegTable[num]>>5)&0x01));
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <display7SEG2+0xdc>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	095b      	lsrs	r3, r3, #5
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <display7SEG2+0xe0>)
 8000c96:	f001 f96a 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, ((sevenSegTable[num]>>6)&0x01));
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <display7SEG2+0xdc>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	099b      	lsrs	r3, r3, #6
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <display7SEG2+0xe0>)
 8000cb4:	f001 f95b 	bl	8001f6e <HAL_GPIO_WritePin>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	08002fe8 	.word	0x08002fe8
 8000cc4:	40010c00 	.word	0x40010c00

08000cc8 <blinkDigit1>:

void blinkDigit1(int num1, int num2){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	4816      	ldr	r0, [pc, #88]	; (8000d34 <blinkDigit1+0x6c>)
 8000cda:	f001 f948 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <blinkDigit1+0x6c>)
 8000ce6:	f001 f942 	bl	8001f6e <HAL_GPIO_WritePin>
	display7SEG1(num1/10);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <blinkDigit1+0x70>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1092      	asrs	r2, r2, #2
 8000cf4:	17db      	asrs	r3, r3, #31
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff07 	bl	8000b0c <display7SEG1>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <blinkDigit1+0x6c>)
 8000d06:	f001 f932 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <blinkDigit1+0x6c>)
 8000d12:	f001 f92c 	bl	8001f6e <HAL_GPIO_WritePin>
	display7SEG2(num2/10);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <blinkDigit1+0x70>)
 8000d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1e:	1092      	asrs	r2, r2, #2
 8000d20:	17db      	asrs	r3, r3, #31
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5d 	bl	8000be4 <display7SEG2>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40010800 	.word	0x40010800
 8000d38:	66666667 	.word	0x66666667

08000d3c <blinkDigit2>:

void blinkDigit2(int num1, int num2){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4c:	481b      	ldr	r0, [pc, #108]	; (8000dbc <blinkDigit2+0x80>)
 8000d4e:	f001 f90e 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	4818      	ldr	r0, [pc, #96]	; (8000dbc <blinkDigit2+0x80>)
 8000d5a:	f001 f908 	bl	8001f6e <HAL_GPIO_WritePin>
	display7SEG1(num1%10);
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <blinkDigit2+0x84>)
 8000d62:	fb83 1302 	smull	r1, r3, r3, r2
 8000d66:	1099      	asrs	r1, r3, #2
 8000d68:	17d3      	asrs	r3, r2, #31
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	1ad1      	subs	r1, r2, r3
 8000d76:	4608      	mov	r0, r1
 8000d78:	f7ff fec8 	bl	8000b0c <display7SEG1>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <blinkDigit2+0x80>)
 8000d84:	f001 f8f3 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <blinkDigit2+0x80>)
 8000d90:	f001 f8ed 	bl	8001f6e <HAL_GPIO_WritePin>
	display7SEG2(num2%10);
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <blinkDigit2+0x84>)
 8000d98:	fb83 1302 	smull	r1, r3, r3, r2
 8000d9c:	1099      	asrs	r1, r3, #2
 8000d9e:	17d3      	asrs	r3, r2, #31
 8000da0:	1ac9      	subs	r1, r1, r3
 8000da2:	460b      	mov	r3, r1
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	440b      	add	r3, r1
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	1ad1      	subs	r1, r2, r3
 8000dac:	4608      	mov	r0, r1
 8000dae:	f7ff ff19 	bl	8000be4 <display7SEG2>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	66666667 	.word	0x66666667

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc8:	f000 fdd0 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dcc:	f000 f82e 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000dd0:	f000 f868 	bl	8000ea4 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000dd4:	f000 f8b2 	bl	8000f3c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000dd8:	480f      	ldr	r0, [pc, #60]	; (8000e18 <main+0x54>)
 8000dda:	f001 fd31 	bl	8002840 <HAL_TIM_Base_Start_IT>

  initWaitingTime();
 8000dde:	f7ff fe05 	bl	80009ec <initWaitingTime>
  initVar();
 8000de2:	f7ff fe1d 	bl	8000a20 <initVar>

  SCH_Init();
 8000de6:	f000 f91c 	bl	8001022 <SCH_Init>
  SCH_Add_Task(timerRun, 10, 10);
 8000dea:	220a      	movs	r2, #10
 8000dec:	210a      	movs	r1, #10
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <main+0x58>)
 8000df0:	f000 f92c 	bl	800104c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 100, 100);
 8000df4:	2264      	movs	r2, #100	; 0x64
 8000df6:	2164      	movs	r1, #100	; 0x64
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <main+0x5c>)
 8000dfa:	f000 f927 	bl	800104c <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 20, 10);
 8000dfe:	220a      	movs	r2, #10
 8000e00:	2114      	movs	r1, #20
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <main+0x60>)
 8000e04:	f000 f922 	bl	800104c <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 200, 100);
 8000e08:	2264      	movs	r2, #100	; 0x64
 8000e0a:	21c8      	movs	r1, #200	; 0xc8
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <main+0x64>)
 8000e0e:	f000 f91d 	bl	800104c <SCH_Add_Task>
//  fsm_scheduler_init();
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000e12:	f000 f9a3 	bl	800115c <SCH_Dispatch_Tasks>
 8000e16:	e7fc      	b.n	8000e12 <main+0x4e>
 8000e18:	20000460 	.word	0x20000460
 8000e1c:	08001495 	.word	0x08001495
 8000e20:	080002a1 	.word	0x080002a1
 8000e24:	080001a1 	.word	0x080001a1
 8000e28:	080005bd 	.word	0x080005bd

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b090      	sub	sp, #64	; 0x40
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0318 	add.w	r3, r7, #24
 8000e36:	2228      	movs	r2, #40	; 0x28
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 f8b8 	bl	8002fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e52:	2301      	movs	r3, #1
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e56:	2310      	movs	r3, #16
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 f8b4 	bl	8001fd0 <HAL_RCC_OscConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e6e:	f000 f8d3 	bl	8001018 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e72:	230f      	movs	r3, #15
 8000e74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fb20 	bl	80024d0 <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e96:	f000 f8bf 	bl	8001018 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3740      	adds	r7, #64	; 0x40
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000eca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ece:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ed8:	2209      	movs	r2, #9
 8000eda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000eea:	f001 fc59 	bl	80027a0 <HAL_TIM_Base_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ef4:	f000 f890 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000f06:	f001 fdef 	bl	8002ae8 <HAL_TIM_ConfigClockSource>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f10:	f000 f882 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000f22:	f001 ffb7 	bl	8002e94 <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f2c:	f000 f874 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000460 	.word	0x20000460

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <MX_GPIO_Init+0xbc>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <MX_GPIO_Init+0xbc>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <MX_GPIO_Init+0xbc>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <MX_GPIO_Init+0xbc>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <MX_GPIO_Init+0xbc>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MX_GPIO_Init+0xbc>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f80:	2200      	movs	r2, #0
 8000f82:	f640 71fe 	movw	r1, #4094	; 0xffe
 8000f86:	481d      	ldr	r0, [pc, #116]	; (8000ffc <MX_GPIO_Init+0xc0>)
 8000f88:	f000 fff1 	bl	8001f6e <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_Pin|B0_Pin|C0_Pin|D1_Pin
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000f92:	481b      	ldr	r0, [pc, #108]	; (8001000 <MX_GPIO_Init+0xc4>)
 8000f94:	f000 ffeb 	bl	8001f6e <HAL_GPIO_WritePin>
                          |B1_Pin|C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin LED_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f98:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000f9c:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4812      	ldr	r0, [pc, #72]	; (8000ffc <MX_GPIO_Init+0xc0>)
 8000fb2:	f000 fe4b 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin B0_Pin C0_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin A1_Pin
                           B1_Pin C1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|B0_Pin|C0_Pin|D1_Pin
 8000fb6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000fba:	60bb      	str	r3, [r7, #8]
                          |E1_Pin|F1_Pin|G1_Pin|D0_Pin
                          |E0_Pin|F0_Pin|G0_Pin|A1_Pin
                          |B1_Pin|C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_GPIO_Init+0xc4>)
 8000fd0:	f000 fe3c 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000fd4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000fd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <MX_GPIO_Init+0xc0>)
 8000fea:	f000 fe2f 	bl	8001c4c <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00

08001004 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800100c:	f000 f902 	bl	8001214 <SCH_Update>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>

08001022 <SCH_Init>:
#include "scheduler.h"

// Khởi tạo bộ lập lịch
void SCH_Init() {
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	e006      	b.n	800103c <SCH_Init+0x1a>
        SCH_Delete_Task(i);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f947 	bl	80012c4 <SCH_Delete_Task>
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	3301      	adds	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b27      	cmp	r3, #39	; 0x27
 8001040:	d9f5      	bls.n	800102e <SCH_Init+0xc>
    }
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <SCH_Add_Task>:

// Thêm tác vụ mới vào bộ lập lịch
void SCH_Add_Task(void (*pFunction) (), uint32_t DELAY, uint32_t PERIOD) {
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
    DELAY = DELAY / TICK;  // Đổi DELAY và PERIOD về đơn vị TICK
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4a28      	ldr	r2, [pc, #160]	; (80010fc <SCH_Add_Task+0xb0>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	08db      	lsrs	r3, r3, #3
 8001062:	60bb      	str	r3, [r7, #8]
    PERIOD = PERIOD / TICK;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a25      	ldr	r2, [pc, #148]	; (80010fc <SCH_Add_Task+0xb0>)
 8001068:	fba2 2303 	umull	r2, r3, r2, r3
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	607b      	str	r3, [r7, #4]

    uint8_t index;
    for (index = 0; index < SCH_MAX_TASKS; index++) {
 8001070:	2300      	movs	r3, #0
 8001072:	75fb      	strb	r3, [r7, #23]
 8001074:	e00c      	b.n	8001090 <SCH_Add_Task+0x44>
        if (SCH_tasks_G[index].pTask == 0) break;  // Tìm phần tử trống
 8001076:	7dfa      	ldrb	r2, [r7, #23]
 8001078:	4921      	ldr	r1, [pc, #132]	; (8001100 <SCH_Add_Task+0xb4>)
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <SCH_Add_Task+0x4c>
    for (index = 0; index < SCH_MAX_TASKS; index++) {
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	3301      	adds	r3, #1
 800108e:	75fb      	strb	r3, [r7, #23]
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b27      	cmp	r3, #39	; 0x27
 8001094:	d9ef      	bls.n	8001076 <SCH_Add_Task+0x2a>
 8001096:	e000      	b.n	800109a <SCH_Add_Task+0x4e>
        if (SCH_tasks_G[index].pTask == 0) break;  // Tìm phần tử trống
 8001098:	bf00      	nop
    }

    // Nếu không còn chỗ trống trong mảng
    if (index == SCH_MAX_TASKS) return;
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	2b28      	cmp	r3, #40	; 0x28
 800109e:	d027      	beq.n	80010f0 <SCH_Add_Task+0xa4>

    // Thêm tác vụ vào vị trí tìm được
    SCH_tasks_G[index].pTask = pFunction;
 80010a0:	7dfa      	ldrb	r2, [r7, #23]
 80010a2:	4917      	ldr	r1, [pc, #92]	; (8001100 <SCH_Add_Task+0xb4>)
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[index].Delay = DELAY;
 80010b2:	7dfa      	ldrb	r2, [r7, #23]
 80010b4:	4912      	ldr	r1, [pc, #72]	; (8001100 <SCH_Add_Task+0xb4>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3304      	adds	r3, #4
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[index].Period = PERIOD;
 80010c6:	7dfa      	ldrb	r2, [r7, #23]
 80010c8:	490d      	ldr	r1, [pc, #52]	; (8001100 <SCH_Add_Task+0xb4>)
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	3308      	adds	r3, #8
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[index].Runme = 0;
 80010da:	7dfa      	ldrb	r2, [r7, #23]
 80010dc:	4908      	ldr	r1, [pc, #32]	; (8001100 <SCH_Add_Task+0xb4>)
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	330c      	adds	r3, #12
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e000      	b.n	80010f2 <SCH_Add_Task+0xa6>
    if (index == SCH_MAX_TASKS) return;
 80010f0:	bf00      	nop
}
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	cccccccd 	.word	0xcccccccd
 8001100:	20000140 	.word	0x20000140

08001104 <SCH_Update_ListTask>:

// Cập nhật danh sách tác vụ sau khi một tác vụ được xử lý
void SCH_Update_ListTask(uint8_t index) {
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = index; i < SCH_MAX_TASKS - 1; i++) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e017      	b.n	8001144 <SCH_Update_ListTask+0x40>
        SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	7bf9      	ldrb	r1, [r7, #15]
 800111a:	480f      	ldr	r0, [pc, #60]	; (8001158 <SCH_Update_ListTask+0x54>)
 800111c:	460b      	mov	r3, r1
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4418      	add	r0, r3
 8001126:	490c      	ldr	r1, [pc, #48]	; (8001158 <SCH_Update_ListTask+0x54>)
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	4604      	mov	r4, r0
 8001134:	461d      	mov	r5, r3
 8001136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113a:	682b      	ldr	r3, [r5, #0]
 800113c:	6023      	str	r3, [r4, #0]
    for (uint8_t i = index; i < SCH_MAX_TASKS - 1; i++) {
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	3301      	adds	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b26      	cmp	r3, #38	; 0x26
 8001148:	d9e4      	bls.n	8001114 <SCH_Update_ListTask+0x10>
    }
    SCH_Delete_Task(SCH_MAX_TASKS - 1);  // Xóa phần tử cuối cùng
 800114a:	2027      	movs	r0, #39	; 0x27
 800114c:	f000 f8ba 	bl	80012c4 <SCH_Delete_Task>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bdb0      	pop	{r4, r5, r7, pc}
 8001158:	20000140 	.word	0x20000140

0800115c <SCH_Dispatch_Tasks>:

// Đảm bảo chỉ một tác vụ được thực thi tại một thời điểm
void SCH_Dispatch_Tasks() {
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < SCH_MAX_TASKS; index++) {
 8001162:	2300      	movs	r3, #0
 8001164:	75fb      	strb	r3, [r7, #23]
 8001166:	e04b      	b.n	8001200 <SCH_Dispatch_Tasks+0xa4>
        if (SCH_tasks_G[index].Runme) {
 8001168:	7dfa      	ldrb	r2, [r7, #23]
 800116a:	4929      	ldr	r1, [pc, #164]	; (8001210 <SCH_Dispatch_Tasks+0xb4>)
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	330c      	adds	r3, #12
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d03d      	beq.n	80011fa <SCH_Dispatch_Tasks+0x9e>
            (*SCH_tasks_G[index].pTask)();  // Gọi hàm của tác vụ
 800117e:	7dfa      	ldrb	r2, [r7, #23]
 8001180:	4923      	ldr	r1, [pc, #140]	; (8001210 <SCH_Dispatch_Tasks+0xb4>)
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4798      	blx	r3
            SCH_tasks_G[index].Runme--;  // Giảm số lần chạy của tác vụ
 8001190:	7dfa      	ldrb	r2, [r7, #23]
 8001192:	491f      	ldr	r1, [pc, #124]	; (8001210 <SCH_Dispatch_Tasks+0xb4>)
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	330c      	adds	r3, #12
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	1e59      	subs	r1, r3, #1
 80011a4:	481a      	ldr	r0, [pc, #104]	; (8001210 <SCH_Dispatch_Tasks+0xb4>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4403      	add	r3, r0
 80011b0:	330c      	adds	r3, #12
 80011b2:	6019      	str	r1, [r3, #0]

            // Xử lý và cập nhật tác vụ
            sTask temp = SCH_tasks_G[index];
 80011b4:	7dfa      	ldrb	r2, [r7, #23]
 80011b6:	4916      	ldr	r1, [pc, #88]	; (8001210 <SCH_Dispatch_Tasks+0xb4>)
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	463c      	mov	r4, r7
 80011c4:	461d      	mov	r5, r3
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	6023      	str	r3, [r4, #0]
            SCH_Update_ListTask(index);  // Cập nhật danh sách sau khi xóa tác vụ
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff97 	bl	8001104 <SCH_Update_ListTask>
            if (temp.Period) {
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00e      	beq.n	80011fa <SCH_Dispatch_Tasks+0x9e>
                SCH_Add_Task(temp.pTask, temp.Period * TICK, temp.Period * TICK);
 80011dc:	6838      	ldr	r0, [r7, #0]
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4619      	mov	r1, r3
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	461a      	mov	r2, r3
 80011f6:	f7ff ff29 	bl	800104c <SCH_Add_Task>
    for (uint8_t index = 0; index < SCH_MAX_TASKS; index++) {
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	3301      	adds	r3, #1
 80011fe:	75fb      	strb	r3, [r7, #23]
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b27      	cmp	r3, #39	; 0x27
 8001204:	d9b0      	bls.n	8001168 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bdb0      	pop	{r4, r5, r7, pc}
 8001210:	20000140 	.word	0x20000140

08001214 <SCH_Update>:

// Cập nhật trạng thái của các tác vụ, kiểm tra thời gian delay
void SCH_Update() {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < SCH_MAX_TASKS; index++) {
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	e046      	b.n	80012ae <SCH_Update+0x9a>
        if (SCH_tasks_G[index].pTask != 0) {  // Kiểm tra xem có tác vụ hay không
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	4927      	ldr	r1, [pc, #156]	; (80012c0 <SCH_Update+0xac>)
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d039      	beq.n	80012a8 <SCH_Update+0x94>
            if (SCH_tasks_G[index].Delay == 0) {
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	4922      	ldr	r1, [pc, #136]	; (80012c0 <SCH_Update+0xac>)
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	3304      	adds	r3, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d11c      	bne.n	8001284 <SCH_Update+0x70>
                SCH_tasks_G[index].Runme = 1;
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	491c      	ldr	r1, [pc, #112]	; (80012c0 <SCH_Update+0xac>)
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	330c      	adds	r3, #12
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
                SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
 800125e:	79f9      	ldrb	r1, [r7, #7]
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	4817      	ldr	r0, [pc, #92]	; (80012c0 <SCH_Update+0xac>)
 8001264:	460b      	mov	r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4403      	add	r3, r0
 800126e:	3308      	adds	r3, #8
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	4813      	ldr	r0, [pc, #76]	; (80012c0 <SCH_Update+0xac>)
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4403      	add	r3, r0
 800127e:	3304      	adds	r3, #4
 8001280:	6019      	str	r1, [r3, #0]
 8001282:	e011      	b.n	80012a8 <SCH_Update+0x94>
            } else {
                SCH_tasks_G[index].Delay--;
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	490e      	ldr	r1, [pc, #56]	; (80012c0 <SCH_Update+0xac>)
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	3304      	adds	r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1e59      	subs	r1, r3, #1
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <SCH_Update+0xac>)
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4403      	add	r3, r0
 80012a4:	3304      	adds	r3, #4
 80012a6:	6019      	str	r1, [r3, #0]
    for (uint8_t index = 0; index < SCH_MAX_TASKS; index++) {
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	3301      	adds	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b27      	cmp	r3, #39	; 0x27
 80012b2:	d9b5      	bls.n	8001220 <SCH_Update+0xc>
            }
        }
    }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000140 	.word	0x20000140

080012c4 <SCH_Delete_Task>:

// Xóa một tác vụ khỏi bộ lập lịch
void SCH_Delete_Task(const uint8_t TASK_INDEX) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    SCH_tasks_G[TASK_INDEX].pTask = 0;
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	4915      	ldr	r1, [pc, #84]	; (8001328 <SCH_Delete_Task+0x64>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].Delay = 0;
 80012e0:	79fa      	ldrb	r2, [r7, #7]
 80012e2:	4911      	ldr	r1, [pc, #68]	; (8001328 <SCH_Delete_Task+0x64>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	3304      	adds	r3, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].Period = 0;
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	490c      	ldr	r1, [pc, #48]	; (8001328 <SCH_Delete_Task+0x64>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	3308      	adds	r3, #8
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].Runme = 0;
 8001308:	79fa      	ldrb	r2, [r7, #7]
 800130a:	4907      	ldr	r1, [pc, #28]	; (8001328 <SCH_Delete_Task+0x64>)
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	330c      	adds	r3, #12
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000140 	.word	0x20000140

0800132c <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <setTimer1+0x20>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <setTimer1+0x24>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	200000f0 	.word	0x200000f0
 8001350:	200000f4 	.word	0x200000f4

08001354 <setTimer2>:

void setTimer2(int duration){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 800135c:	4a05      	ldr	r2, [pc, #20]	; (8001374 <setTimer2+0x20>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <setTimer2+0x24>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200000f8 	.word	0x200000f8
 8001378:	200000fc 	.word	0x200000fc

0800137c <setTimer3>:

void setTimer3(int duration){
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <setTimer3+0x20>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <setTimer3+0x24>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000100 	.word	0x20000100
 80013a0:	20000104 	.word	0x20000104

080013a4 <setTimer4>:

void setTimer4(int duration){
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <setTimer4+0x20>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <setTimer4+0x24>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000108 	.word	0x20000108
 80013c8:	2000010c 	.word	0x2000010c

080013cc <setTimer5>:

void setTimer5(int duration){
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <setTimer5+0x20>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <setTimer5+0x24>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000110 	.word	0x20000110
 80013f0:	20000114 	.word	0x20000114

080013f4 <setTimer6>:

void setTimer6(int duration){
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <setTimer6+0x20>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <setTimer6+0x24>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000118 	.word	0x20000118
 8001418:	2000011c 	.word	0x2000011c

0800141c <setTimer7>:

void setTimer7(int duration){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	timer7_counter = duration;
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <setTimer7+0x20>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <setTimer7+0x24>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000120 	.word	0x20000120
 8001440:	20000124 	.word	0x20000124

08001444 <setTimer8>:

void setTimer8(int duration){
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	timer8_counter = duration;
 800144c:	4a05      	ldr	r2, [pc, #20]	; (8001464 <setTimer8+0x20>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <setTimer8+0x24>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000128 	.word	0x20000128
 8001468:	2000012c 	.word	0x2000012c

0800146c <setTimer9>:

void setTimer9(int duration){
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	timer9_counter = duration;
 8001474:	4a05      	ldr	r2, [pc, #20]	; (800148c <setTimer9+0x20>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <setTimer9+0x24>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000130 	.word	0x20000130
 8001490:	20000134 	.word	0x20000134

08001494 <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001498:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <timerRun+0x14c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	dd0b      	ble.n	80014b8 <timerRun+0x24>
		timer1_counter--;
 80014a0:	4b4f      	ldr	r3, [pc, #316]	; (80015e0 <timerRun+0x14c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4a4e      	ldr	r2, [pc, #312]	; (80015e0 <timerRun+0x14c>)
 80014a8:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 80014aa:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <timerRun+0x14c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <timerRun+0x24>
			timer1_flag = 1;
 80014b2:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <timerRun+0x150>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 80014b8:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <timerRun+0x154>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	dd0b      	ble.n	80014d8 <timerRun+0x44>
		timer2_counter--;
 80014c0:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <timerRun+0x154>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	4a48      	ldr	r2, [pc, #288]	; (80015e8 <timerRun+0x154>)
 80014c8:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <timerRun+0x154>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <timerRun+0x44>
			timer2_flag = 1;
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <timerRun+0x158>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <timerRun+0x15c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	dd0b      	ble.n	80014f8 <timerRun+0x64>
		timer3_counter--;
 80014e0:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <timerRun+0x15c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	4a42      	ldr	r2, [pc, #264]	; (80015f0 <timerRun+0x15c>)
 80014e8:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <timerRun+0x15c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <timerRun+0x64>
			timer3_flag = 1;
 80014f2:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <timerRun+0x160>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 80014f8:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <timerRun+0x164>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	dd0b      	ble.n	8001518 <timerRun+0x84>
		timer4_counter--;
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <timerRun+0x164>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3b01      	subs	r3, #1
 8001506:	4a3c      	ldr	r2, [pc, #240]	; (80015f8 <timerRun+0x164>)
 8001508:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <timerRun+0x164>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <timerRun+0x84>
			timer4_flag = 1;
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <timerRun+0x168>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <timerRun+0x16c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	dd0b      	ble.n	8001538 <timerRun+0xa4>
		timer5_counter--;
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <timerRun+0x16c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	4a36      	ldr	r2, [pc, #216]	; (8001600 <timerRun+0x16c>)
 8001528:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 800152a:	4b35      	ldr	r3, [pc, #212]	; (8001600 <timerRun+0x16c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <timerRun+0xa4>
			timer5_flag = 1;
 8001532:	4b34      	ldr	r3, [pc, #208]	; (8001604 <timerRun+0x170>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <timerRun+0x174>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	dd0b      	ble.n	8001558 <timerRun+0xc4>
		timer6_counter--;
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <timerRun+0x174>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	4a30      	ldr	r2, [pc, #192]	; (8001608 <timerRun+0x174>)
 8001548:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <timerRun+0x174>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <timerRun+0xc4>
			timer6_flag = 1;
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <timerRun+0x178>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <timerRun+0x17c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	dd0b      	ble.n	8001578 <timerRun+0xe4>
		timer7_counter--;
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <timerRun+0x17c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <timerRun+0x17c>)
 8001568:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <timerRun+0x17c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <timerRun+0xe4>
			timer7_flag = 1;
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <timerRun+0x180>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <timerRun+0x184>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd0b      	ble.n	8001598 <timerRun+0x104>
		timer8_counter--;
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <timerRun+0x184>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a24      	ldr	r2, [pc, #144]	; (8001618 <timerRun+0x184>)
 8001588:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <timerRun+0x184>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <timerRun+0x104>
			timer8_flag = 1;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <timerRun+0x188>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <timerRun+0x18c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd0b      	ble.n	80015b8 <timerRun+0x124>
		timer9_counter--;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <timerRun+0x18c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <timerRun+0x18c>)
 80015a8:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <timerRun+0x18c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <timerRun+0x124>
			timer9_flag = 1;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <timerRun+0x190>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <timerRun+0x194>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dd0b      	ble.n	80015d8 <timerRun+0x144>
		timer10_counter--;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <timerRun+0x194>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <timerRun+0x194>)
 80015c8:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <timerRun+0x194>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <timerRun+0x144>
			timer10_flag = 1;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <timerRun+0x198>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	200000f0 	.word	0x200000f0
 80015e4:	200000f4 	.word	0x200000f4
 80015e8:	200000f8 	.word	0x200000f8
 80015ec:	200000fc 	.word	0x200000fc
 80015f0:	20000100 	.word	0x20000100
 80015f4:	20000104 	.word	0x20000104
 80015f8:	20000108 	.word	0x20000108
 80015fc:	2000010c 	.word	0x2000010c
 8001600:	20000110 	.word	0x20000110
 8001604:	20000114 	.word	0x20000114
 8001608:	20000118 	.word	0x20000118
 800160c:	2000011c 	.word	0x2000011c
 8001610:	20000120 	.word	0x20000120
 8001614:	20000124 	.word	0x20000124
 8001618:	20000128 	.word	0x20000128
 800161c:	2000012c 	.word	0x2000012c
 8001620:	20000130 	.word	0x20000130
 8001624:	20000134 	.word	0x20000134
 8001628:	20000138 	.word	0x20000138
 800162c:	2000013c 	.word	0x2000013c

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_MspInit+0x5c>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a14      	ldr	r2, [pc, #80]	; (800168c <HAL_MspInit+0x5c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_MspInit+0x5c>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_MspInit+0x5c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_MspInit+0x60>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_MspInit+0x60>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000

08001694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a4:	d113      	bne.n	80016ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_TIM_Base_MspInit+0x44>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_TIM_Base_MspInit+0x44>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_TIM_Base_MspInit+0x44>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	201c      	movs	r0, #28
 80016c4:	f000 fa8b 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016c8:	201c      	movs	r0, #28
 80016ca:	f000 faa4 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001722:	f000 f969 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <TIM2_IRQHandler+0x10>)
 8001732:	f001 f8d1 	bl	80028d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000460 	.word	0x20000460

08001740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <enableRed1>:
 *      Author: ASUS
 */
#include "main.h"
#include "traffic_light.h"

void enableRed1(){
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2102      	movs	r1, #2
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <enableRed1+0x28>)
 8001756:	f000 fc0a 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800175a:	2201      	movs	r2, #1
 800175c:	2108      	movs	r1, #8
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <enableRed1+0x28>)
 8001760:	f000 fc05 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2104      	movs	r1, #4
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <enableRed1+0x28>)
 800176a:	f000 fc00 	bl	8001f6e <HAL_GPIO_WritePin>
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40010800 	.word	0x40010800

08001778 <enableYellow1>:

void enableYellow1(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2102      	movs	r1, #2
 8001780:	4807      	ldr	r0, [pc, #28]	; (80017a0 <enableYellow1+0x28>)
 8001782:	f000 fbf4 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2108      	movs	r1, #8
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <enableYellow1+0x28>)
 800178c:	f000 fbef 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	2104      	movs	r1, #4
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <enableYellow1+0x28>)
 8001796:	f000 fbea 	bl	8001f6e <HAL_GPIO_WritePin>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40010800 	.word	0x40010800

080017a4 <enableGreen1>:
void enableGreen1(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2102      	movs	r1, #2
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <enableGreen1+0x28>)
 80017ae:	f000 fbde 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2108      	movs	r1, #8
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <enableGreen1+0x28>)
 80017b8:	f000 fbd9 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2104      	movs	r1, #4
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <enableGreen1+0x28>)
 80017c2:	f000 fbd4 	bl	8001f6e <HAL_GPIO_WritePin>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40010800 	.word	0x40010800

080017d0 <enableRed2>:

void enableRed2(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2110      	movs	r1, #16
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <enableRed2+0x28>)
 80017da:	f000 fbc8 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2140      	movs	r1, #64	; 0x40
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <enableRed2+0x28>)
 80017e4:	f000 fbc3 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2120      	movs	r1, #32
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <enableRed2+0x28>)
 80017ee:	f000 fbbe 	bl	8001f6e <HAL_GPIO_WritePin>
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40010800 	.word	0x40010800

080017fc <enableYellow2>:
void enableYellow2(){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001800:	2201      	movs	r2, #1
 8001802:	2110      	movs	r1, #16
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <enableYellow2+0x28>)
 8001806:	f000 fbb2 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2140      	movs	r1, #64	; 0x40
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <enableYellow2+0x28>)
 8001810:	f000 fbad 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2120      	movs	r1, #32
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <enableYellow2+0x28>)
 800181a:	f000 fba8 	bl	8001f6e <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40010800 	.word	0x40010800

08001828 <enableGreen2>:
void enableGreen2(){
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800182c:	2201      	movs	r2, #1
 800182e:	2110      	movs	r1, #16
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <enableGreen2+0x28>)
 8001832:	f000 fb9c 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <enableGreen2+0x28>)
 800183c:	f000 fb97 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2120      	movs	r1, #32
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <enableGreen2+0x28>)
 8001846:	f000 fb92 	bl	8001f6e <HAL_GPIO_WritePin>
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40010800 	.word	0x40010800

08001854 <toggleREDs>:

void toggleREDs(){
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8001858:	2102      	movs	r1, #2
 800185a:	480e      	ldr	r0, [pc, #56]	; (8001894 <toggleREDs+0x40>)
 800185c:	f000 fb9f 	bl	8001f9e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8001860:	2110      	movs	r1, #16
 8001862:	480c      	ldr	r0, [pc, #48]	; (8001894 <toggleREDs+0x40>)
 8001864:	f000 fb9b 	bl	8001f9e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2108      	movs	r1, #8
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <toggleREDs+0x40>)
 800186e:	f000 fb7e 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2140      	movs	r1, #64	; 0x40
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <toggleREDs+0x40>)
 8001878:	f000 fb79 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2104      	movs	r1, #4
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <toggleREDs+0x40>)
 8001882:	f000 fb74 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001886:	2201      	movs	r2, #1
 8001888:	2120      	movs	r1, #32
 800188a:	4802      	ldr	r0, [pc, #8]	; (8001894 <toggleREDs+0x40>)
 800188c:	f000 fb6f 	bl	8001f6e <HAL_GPIO_WritePin>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40010800 	.word	0x40010800

08001898 <toggleGREENs>:
void toggleGREENs(){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 800189c:	2108      	movs	r1, #8
 800189e:	480e      	ldr	r0, [pc, #56]	; (80018d8 <toggleGREENs+0x40>)
 80018a0:	f000 fb7d 	bl	8001f9e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	480c      	ldr	r0, [pc, #48]	; (80018d8 <toggleGREENs+0x40>)
 80018a8:	f000 fb79 	bl	8001f9e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2102      	movs	r1, #2
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <toggleGREENs+0x40>)
 80018b2:	f000 fb5c 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	2110      	movs	r1, #16
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <toggleGREENs+0x40>)
 80018bc:	f000 fb57 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2104      	movs	r1, #4
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <toggleGREENs+0x40>)
 80018c6:	f000 fb52 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2120      	movs	r1, #32
 80018ce:	4802      	ldr	r0, [pc, #8]	; (80018d8 <toggleGREENs+0x40>)
 80018d0:	f000 fb4d 	bl	8001f6e <HAL_GPIO_WritePin>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40010800 	.word	0x40010800

080018dc <toggleYELLOWs>:
void toggleYELLOWs(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 80018e0:	2104      	movs	r1, #4
 80018e2:	480e      	ldr	r0, [pc, #56]	; (800191c <toggleYELLOWs+0x40>)
 80018e4:	f000 fb5b 	bl	8001f9e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 80018e8:	2120      	movs	r1, #32
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <toggleYELLOWs+0x40>)
 80018ec:	f000 fb57 	bl	8001f9e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2108      	movs	r1, #8
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <toggleYELLOWs+0x40>)
 80018f6:	f000 fb3a 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	2140      	movs	r1, #64	; 0x40
 80018fe:	4807      	ldr	r0, [pc, #28]	; (800191c <toggleYELLOWs+0x40>)
 8001900:	f000 fb35 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001904:	2201      	movs	r2, #1
 8001906:	2102      	movs	r1, #2
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <toggleYELLOWs+0x40>)
 800190a:	f000 fb30 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800190e:	2201      	movs	r2, #1
 8001910:	2110      	movs	r1, #16
 8001912:	4802      	ldr	r0, [pc, #8]	; (800191c <toggleYELLOWs+0x40>)
 8001914:	f000 fb2b 	bl	8001f6e <HAL_GPIO_WritePin>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40010800 	.word	0x40010800

08001920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001920:	f7ff ff0e 	bl	8001740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001926:	490c      	ldr	r1, [pc, #48]	; (8001958 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001928:	4a0c      	ldr	r2, [pc, #48]	; (800195c <LoopFillZerobss+0x16>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800193c:	4c09      	ldr	r4, [pc, #36]	; (8001964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194a:	f001 fb0d 	bl	8002f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800194e:	f7ff fa39 	bl	8000dc4 <main>
  bx lr
 8001952:	4770      	bx	lr
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800195c:	0800300c 	.word	0x0800300c
  ldr r2, =_sbss
 8001960:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001964:	200004ac 	.word	0x200004ac

08001968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_2_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_Init+0x28>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_Init+0x28>)
 8001976:	f043 0310 	orr.w	r3, r3, #16
 800197a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f923 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	200f      	movs	r0, #15
 8001984:	f000 f808 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fe52 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x54>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f93b 	bl	8001c32 <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d80a      	bhi.n	80019e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f000 f903 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_InitTick+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000054 	.word	0x20000054
 80019f0:	2000005c 	.word	0x2000005c
 80019f4:	20000058 	.word	0x20000058

080019f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_IncTick+0x1c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_IncTick+0x20>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a03      	ldr	r2, [pc, #12]	; (8001a18 <HAL_IncTick+0x20>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	2000005c 	.word	0x2000005c
 8001a18:	200004a8 	.word	0x200004a8

08001a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <HAL_GetTick+0x10>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	200004a8 	.word	0x200004a8

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4906      	ldr	r1, [pc, #24]	; (8001ac8 <__NVIC_EnableIRQ+0x34>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff90 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff2d 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff42 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff90 	bl	8001b20 <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5f 	bl	8001acc <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff35 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa2 	bl	8001b84 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b08b      	sub	sp, #44	; 0x2c
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5e:	e148      	b.n	8001ef2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c60:	2201      	movs	r2, #1
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8137 	bne.w	8001eec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4aa3      	ldr	r2, [pc, #652]	; (8001f10 <HAL_GPIO_Init+0x2c4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d05e      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001c88:	4aa1      	ldr	r2, [pc, #644]	; (8001f10 <HAL_GPIO_Init+0x2c4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d875      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001c8e:	4aa1      	ldr	r2, [pc, #644]	; (8001f14 <HAL_GPIO_Init+0x2c8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d058      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001c94:	4a9f      	ldr	r2, [pc, #636]	; (8001f14 <HAL_GPIO_Init+0x2c8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d86f      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001c9a:	4a9f      	ldr	r2, [pc, #636]	; (8001f18 <HAL_GPIO_Init+0x2cc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d052      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001ca0:	4a9d      	ldr	r2, [pc, #628]	; (8001f18 <HAL_GPIO_Init+0x2cc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d869      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001ca6:	4a9d      	ldr	r2, [pc, #628]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d04c      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001cac:	4a9b      	ldr	r2, [pc, #620]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d863      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cb2:	4a9b      	ldr	r2, [pc, #620]	; (8001f20 <HAL_GPIO_Init+0x2d4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d046      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001cb8:	4a99      	ldr	r2, [pc, #612]	; (8001f20 <HAL_GPIO_Init+0x2d4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d85d      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d82a      	bhi.n	8001d18 <HAL_GPIO_Init+0xcc>
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d859      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cc6:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <HAL_GPIO_Init+0x80>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001d47 	.word	0x08001d47
 8001cd0:	08001d21 	.word	0x08001d21
 8001cd4:	08001d33 	.word	0x08001d33
 8001cd8:	08001d75 	.word	0x08001d75
 8001cdc:	08001d7b 	.word	0x08001d7b
 8001ce0:	08001d7b 	.word	0x08001d7b
 8001ce4:	08001d7b 	.word	0x08001d7b
 8001ce8:	08001d7b 	.word	0x08001d7b
 8001cec:	08001d7b 	.word	0x08001d7b
 8001cf0:	08001d7b 	.word	0x08001d7b
 8001cf4:	08001d7b 	.word	0x08001d7b
 8001cf8:	08001d7b 	.word	0x08001d7b
 8001cfc:	08001d7b 	.word	0x08001d7b
 8001d00:	08001d7b 	.word	0x08001d7b
 8001d04:	08001d7b 	.word	0x08001d7b
 8001d08:	08001d7b 	.word	0x08001d7b
 8001d0c:	08001d7b 	.word	0x08001d7b
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d3d 	.word	0x08001d3d
 8001d18:	4a82      	ldr	r2, [pc, #520]	; (8001f24 <HAL_GPIO_Init+0x2d8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d1e:	e02c      	b.n	8001d7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	623b      	str	r3, [r7, #32]
          break;
 8001d26:	e029      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	623b      	str	r3, [r7, #32]
          break;
 8001d30:	e024      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	3308      	adds	r3, #8
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e01f      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	330c      	adds	r3, #12
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e01a      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	623b      	str	r3, [r7, #32]
          break;
 8001d52:	e013      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	611a      	str	r2, [r3, #16]
          break;
 8001d66:	e009      	b.n	8001d7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	615a      	str	r2, [r3, #20]
          break;
 8001d72:	e003      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          break;
 8001d7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2bff      	cmp	r3, #255	; 0xff
 8001d80:	d801      	bhi.n	8001d86 <HAL_GPIO_Init+0x13a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_Init+0x13e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2bff      	cmp	r3, #255	; 0xff
 8001d90:	d802      	bhi.n	8001d98 <HAL_GPIO_Init+0x14c>
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_Init+0x152>
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	210f      	movs	r1, #15
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	401a      	ands	r2, r3
 8001db0:	6a39      	ldr	r1, [r7, #32]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8090 	beq.w	8001eec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dcc:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HAL_GPIO_Init+0x2dc>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a55      	ldr	r2, [pc, #340]	; (8001f28 <HAL_GPIO_Init+0x2dc>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_GPIO_Init+0x2dc>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de4:	4a51      	ldr	r2, [pc, #324]	; (8001f2c <HAL_GPIO_Init+0x2e0>)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a49      	ldr	r2, [pc, #292]	; (8001f30 <HAL_GPIO_Init+0x2e4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00d      	beq.n	8001e2c <HAL_GPIO_Init+0x1e0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a48      	ldr	r2, [pc, #288]	; (8001f34 <HAL_GPIO_Init+0x2e8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <HAL_GPIO_Init+0x1dc>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_GPIO_Init+0x2ec>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_GPIO_Init+0x1d8>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e004      	b.n	8001e2e <HAL_GPIO_Init+0x1e2>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x1e2>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_GPIO_Init+0x1e2>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e30:	f002 0203 	and.w	r2, r2, #3
 8001e34:	0092      	lsls	r2, r2, #2
 8001e36:	4093      	lsls	r3, r2
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e3e:	493b      	ldr	r1, [pc, #236]	; (8001f2c <HAL_GPIO_Init+0x2e0>)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e58:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4937      	ldr	r1, [pc, #220]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4933      	ldr	r1, [pc, #204]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e80:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	492d      	ldr	r1, [pc, #180]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4929      	ldr	r1, [pc, #164]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	4923      	ldr	r1, [pc, #140]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	491f      	ldr	r1, [pc, #124]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	4919      	ldr	r1, [pc, #100]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60cb      	str	r3, [r1, #12]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4915      	ldr	r1, [pc, #84]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	3301      	adds	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f47f aeaf 	bne.w	8001c60 <HAL_GPIO_Init+0x14>
  }
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	372c      	adds	r7, #44	; 0x2c
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	10320000 	.word	0x10320000
 8001f14:	10310000 	.word	0x10310000
 8001f18:	10220000 	.word	0x10220000
 8001f1c:	10210000 	.word	0x10210000
 8001f20:	10120000 	.word	0x10120000
 8001f24:	10110000 	.word	0x10110000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40010800 	.word	0x40010800
 8001f34:	40010c00 	.word	0x40010c00
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	40010400 	.word	0x40010400

08001f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e001      	b.n	8001f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	807b      	strh	r3, [r7, #2]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f7e:	787b      	ldrb	r3, [r7, #1]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f84:	887a      	ldrh	r2, [r7, #2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f8a:	e003      	b.n	8001f94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	041a      	lsls	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb0:	887a      	ldrh	r2, [r7, #2]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	041a      	lsls	r2, r3, #16
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	400b      	ands	r3, r1
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e26c      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff0:	4b92      	ldr	r3, [pc, #584]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d00c      	beq.n	8002016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ffc:	4b8f      	ldr	r3, [pc, #572]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d112      	bne.n	800202e <HAL_RCC_OscConfig+0x5e>
 8002008:	4b8c      	ldr	r3, [pc, #560]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d10b      	bne.n	800202e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002016:	4b89      	ldr	r3, [pc, #548]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d06c      	beq.n	80020fc <HAL_RCC_OscConfig+0x12c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d168      	bne.n	80020fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e246      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x76>
 8002038:	4b80      	ldr	r3, [pc, #512]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a7f      	ldr	r2, [pc, #508]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	e02e      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x98>
 800204e:	4b7b      	ldr	r3, [pc, #492]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7a      	ldr	r2, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b78      	ldr	r3, [pc, #480]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a77      	ldr	r2, [pc, #476]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e01d      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0xbc>
 8002072:	4b72      	ldr	r3, [pc, #456]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a71      	ldr	r2, [pc, #452]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6e      	ldr	r2, [pc, #440]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 800208c:	4b6b      	ldr	r3, [pc, #428]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6a      	ldr	r2, [pc, #424]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b68      	ldr	r3, [pc, #416]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a67      	ldr	r2, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fcb6 	bl	8001a1c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff fcb2 	bl	8001a1c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1fa      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe4>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fca2 	bl	8001a1c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fc9e 	bl	8001a1c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1e6      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x10c>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d063      	beq.n	80021d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210a:	4b4c      	ldr	r3, [pc, #304]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b08      	cmp	r3, #8
 8002120:	d11c      	bne.n	800215c <HAL_RCC_OscConfig+0x18c>
 8002122:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d116      	bne.n	800215c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	4b43      	ldr	r3, [pc, #268]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_RCC_OscConfig+0x176>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e1ba      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4939      	ldr	r1, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	e03a      	b.n	80021d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7ff fc57 	bl	8001a1c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7ff fc53 	bl	8001a1c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e19b      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4927      	ldr	r1, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc36 	bl	8001a1c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff fc32 	bl	8001a1c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e17a      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d03a      	beq.n	8002254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d019      	beq.n	800221a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7ff fc16 	bl	8001a1c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f4:	f7ff fc12 	bl	8001a1c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e15a      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002212:	2001      	movs	r0, #1
 8002214:	f000 faa6 	bl	8002764 <RCC_Delay>
 8002218:	e01c      	b.n	8002254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002220:	f7ff fbfc 	bl	8001a1c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002226:	e00f      	b.n	8002248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff fbf8 	bl	8001a1c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d908      	bls.n	8002248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e140      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	42420000 	.word	0x42420000
 8002244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b9e      	ldr	r3, [pc, #632]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e9      	bne.n	8002228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a6 	beq.w	80023ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b97      	ldr	r3, [pc, #604]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b94      	ldr	r3, [pc, #592]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a93      	ldr	r2, [pc, #588]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b8e      	ldr	r3, [pc, #568]	; (80024c8 <HAL_RCC_OscConfig+0x4f8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d118      	bne.n	80022cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229a:	4b8b      	ldr	r3, [pc, #556]	; (80024c8 <HAL_RCC_OscConfig+0x4f8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a8a      	ldr	r2, [pc, #552]	; (80024c8 <HAL_RCC_OscConfig+0x4f8>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a6:	f7ff fbb9 	bl	8001a1c <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ae:	f7ff fbb5 	bl	8001a1c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b64      	cmp	r3, #100	; 0x64
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0fd      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <HAL_RCC_OscConfig+0x4f8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x312>
 80022d4:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	e02d      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x334>
 80022ea:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a75      	ldr	r2, [pc, #468]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a72      	ldr	r2, [pc, #456]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
 8002302:	e01c      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0x356>
 800230c:	4b6d      	ldr	r3, [pc, #436]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a6c      	ldr	r2, [pc, #432]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a66      	ldr	r2, [pc, #408]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	4b64      	ldr	r3, [pc, #400]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a63      	ldr	r2, [pc, #396]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d015      	beq.n	8002372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7ff fb69 	bl	8001a1c <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7ff fb65 	bl	8001a1c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0ab      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ee      	beq.n	800234e <HAL_RCC_OscConfig+0x37e>
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7ff fb53 	bl	8001a1c <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7ff fb4f 	bl	8001a1c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e095      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ee      	bne.n	800237a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a47      	ldr	r2, [pc, #284]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 8081 	beq.w	80024ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b8:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d061      	beq.n	8002488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d146      	bne.n	800245a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023cc:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <HAL_RCC_OscConfig+0x4fc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7ff fb23 	bl	8001a1c <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7ff fb1f 	bl	8001a1c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e067      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ec:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d108      	bne.n	8002414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	492d      	ldr	r1, [pc, #180]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a19      	ldr	r1, [r3, #32]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	430b      	orrs	r3, r1
 8002426:	4927      	ldr	r1, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_OscConfig+0x4fc>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff faf3 	bl	8001a1c <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff faef 	bl	8001a1c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e037      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x46a>
 8002458:	e02f      	b.n	80024ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_RCC_OscConfig+0x4fc>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff fadc 	bl	8001a1c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7ff fad8 	bl	8001a1c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e020      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x498>
 8002486:	e018      	b.n	80024ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e013      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40007000 	.word	0x40007000
 80024cc:	42420060 	.word	0x42420060

080024d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0d0      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d910      	bls.n	8002514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b67      	ldr	r3, [pc, #412]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0207 	bic.w	r2, r3, #7
 80024fa:	4965      	ldr	r1, [pc, #404]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b63      	ldr	r3, [pc, #396]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0b8      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a58      	ldr	r2, [pc, #352]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a52      	ldr	r2, [pc, #328]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800254e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002550:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	494d      	ldr	r1, [pc, #308]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d040      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d115      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e07f      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e073      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06b      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b39      	ldr	r3, [pc, #228]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4936      	ldr	r1, [pc, #216]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c0:	f7ff fa2c 	bl	8001a1c <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7ff fa28 	bl	8001a1c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e053      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 020c 	and.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1eb      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d210      	bcs.n	8002620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 0207 	bic.w	r2, r3, #7
 8002606:	4922      	ldr	r1, [pc, #136]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e032      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4916      	ldr	r1, [pc, #88]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	490e      	ldr	r1, [pc, #56]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265e:	f000 f821 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8002662:	4602      	mov	r2, r0
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	490a      	ldr	r1, [pc, #40]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	5ccb      	ldrb	r3, [r1, r3]
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <HAL_RCC_ClockConfig+0x1cc>)
 8002678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1d0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f98a 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40022000 	.word	0x40022000
 8002694:	40021000 	.word	0x40021000
 8002698:	08002ff4 	.word	0x08002ff4
 800269c:	20000054 	.word	0x20000054
 80026a0:	20000058 	.word	0x20000058

080026a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	b490      	push	{r4, r7}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026ac:	1d3c      	adds	r4, r7, #4
 80026ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026b4:	f240 2301 	movw	r3, #513	; 0x201
 80026b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x40>
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x46>
 80026e2:	e02d      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e6:	623b      	str	r3, [r7, #32]
      break;
 80026e8:	e02d      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	0c9b      	lsrs	r3, r3, #18
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026f6:	4413      	add	r3, r2
 80026f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	0c5b      	lsrs	r3, r3, #17
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002716:	4413      	add	r3, r2
 8002718:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800271c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002722:	fb02 f203 	mul.w	r2, r2, r3
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	e004      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	623b      	str	r3, [r7, #32]
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002742:	623b      	str	r3, [r7, #32]
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	6a3b      	ldr	r3, [r7, #32]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bc90      	pop	{r4, r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	08002fd8 	.word	0x08002fd8
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	003d0900 	.word	0x003d0900

08002764 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <RCC_Delay+0x34>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <RCC_Delay+0x38>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a5b      	lsrs	r3, r3, #9
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002780:	bf00      	nop
  }
  while (Delay --);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	60fa      	str	r2, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f9      	bne.n	8002780 <RCC_Delay+0x1c>
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000054 	.word	0x20000054
 800279c:	10624dd3 	.word	0x10624dd3

080027a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e041      	b.n	8002836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe ff64 	bl	8001694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 fa6a 	bl	8002cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d001      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e035      	b.n	80028c4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <HAL_TIM_Base_Start_IT+0x90>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_TIM_Base_Start_IT+0x4e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002882:	d004      	beq.n	800288e <HAL_TIM_Base_Start_IT+0x4e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_TIM_Base_Start_IT+0x94>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d111      	bne.n	80028b2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b06      	cmp	r3, #6
 800289e:	d010      	beq.n	80028c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b0:	e007      	b.n	80028c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400

080028d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0202 	mvn.w	r2, #2
 8002904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9b1 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f9a4 	bl	8002c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f9b3 	bl	8002c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d122      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0204 	mvn.w	r2, #4
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f987 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f97a 	bl	8002c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f989 	bl	8002c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b08      	cmp	r3, #8
 8002994:	d122      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d11b      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0208 	mvn.w	r2, #8
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2204      	movs	r2, #4
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f95d 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f950 	bl	8002c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f95f 	bl	8002c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d122      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d11b      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0210 	mvn.w	r2, #16
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2208      	movs	r2, #8
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f933 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f926 	bl	8002c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f935 	bl	8002c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0201 	mvn.w	r2, #1
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fad4 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	2b80      	cmp	r3, #128	; 0x80
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa67 	bl	8002f56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8f9 	bl	8002ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0220 	mvn.w	r2, #32
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa32 	bl	8002f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_TIM_ConfigClockSource+0x18>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0b3      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x180>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b38:	d03e      	beq.n	8002bb8 <HAL_TIM_ConfigClockSource+0xd0>
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3e:	f200 8087 	bhi.w	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b46:	f000 8085 	beq.w	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4e:	d87f      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b50:	2b70      	cmp	r3, #112	; 0x70
 8002b52:	d01a      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0xa2>
 8002b54:	2b70      	cmp	r3, #112	; 0x70
 8002b56:	d87b      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b58:	2b60      	cmp	r3, #96	; 0x60
 8002b5a:	d050      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x116>
 8002b5c:	2b60      	cmp	r3, #96	; 0x60
 8002b5e:	d877      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b60:	2b50      	cmp	r3, #80	; 0x50
 8002b62:	d03c      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0xf6>
 8002b64:	2b50      	cmp	r3, #80	; 0x50
 8002b66:	d873      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d058      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x136>
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d86f      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b70:	2b30      	cmp	r3, #48	; 0x30
 8002b72:	d064      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x156>
 8002b74:	2b30      	cmp	r3, #48	; 0x30
 8002b76:	d86b      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d060      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x156>
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d867      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d05c      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x156>
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d05a      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b88:	e062      	b.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6899      	ldr	r1, [r3, #8]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f000 f95c 	bl	8002e56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	609a      	str	r2, [r3, #8]
      break;
 8002bb6:	e04e      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6899      	ldr	r1, [r3, #8]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f000 f945 	bl	8002e56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bda:	609a      	str	r2, [r3, #8]
      break;
 8002bdc:	e03b      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 f8bc 	bl	8002d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2150      	movs	r1, #80	; 0x50
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f913 	bl	8002e22 <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e02b      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f000 f8da 	bl	8002dc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2160      	movs	r1, #96	; 0x60
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f903 	bl	8002e22 <TIM_ITRx_SetConfig>
      break;
 8002c1c:	e01b      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f000 f89c 	bl	8002d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2140      	movs	r1, #64	; 0x40
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f8f3 	bl	8002e22 <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e00b      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f000 f8ea 	bl	8002e22 <TIM_ITRx_SetConfig>
        break;
 8002c4e:	e002      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <TIM_Base_SetConfig+0xa8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <TIM_Base_SetConfig+0x28>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd6:	d003      	beq.n	8002ce0 <TIM_Base_SetConfig+0x28>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <TIM_Base_SetConfig+0xac>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d108      	bne.n	8002cf2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <TIM_Base_SetConfig+0xa8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x52>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x52>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <TIM_Base_SetConfig+0xac>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <TIM_Base_SetConfig+0xa8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d103      	bne.n	8002d50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	615a      	str	r2, [r3, #20]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400

08002d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f023 0201 	bic.w	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f023 030a 	bic.w	r3, r3, #10
 8002da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	621a      	str	r2, [r3, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f023 0210 	bic.w	r2, r3, #16
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	031b      	lsls	r3, r3, #12
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	621a      	str	r2, [r3, #32]
}
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f043 0307 	orr.w	r3, r3, #7
 8002e44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	021a      	lsls	r2, r3, #8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	609a      	str	r2, [r3, #8]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e041      	b.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d004      	beq.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10c      	bne.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400

08002f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <__libc_init_array>:
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	4d0c      	ldr	r5, [pc, #48]	; (8002fa0 <__libc_init_array+0x38>)
 8002f6e:	4c0d      	ldr	r4, [pc, #52]	; (8002fa4 <__libc_init_array+0x3c>)
 8002f70:	1b64      	subs	r4, r4, r5
 8002f72:	10a4      	asrs	r4, r4, #2
 8002f74:	42a6      	cmp	r6, r4
 8002f76:	d109      	bne.n	8002f8c <__libc_init_array+0x24>
 8002f78:	f000 f822 	bl	8002fc0 <_init>
 8002f7c:	2600      	movs	r6, #0
 8002f7e:	4d0a      	ldr	r5, [pc, #40]	; (8002fa8 <__libc_init_array+0x40>)
 8002f80:	4c0a      	ldr	r4, [pc, #40]	; (8002fac <__libc_init_array+0x44>)
 8002f82:	1b64      	subs	r4, r4, r5
 8002f84:	10a4      	asrs	r4, r4, #2
 8002f86:	42a6      	cmp	r6, r4
 8002f88:	d105      	bne.n	8002f96 <__libc_init_array+0x2e>
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
 8002f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f90:	4798      	blx	r3
 8002f92:	3601      	adds	r6, #1
 8002f94:	e7ee      	b.n	8002f74 <__libc_init_array+0xc>
 8002f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9a:	4798      	blx	r3
 8002f9c:	3601      	adds	r6, #1
 8002f9e:	e7f2      	b.n	8002f86 <__libc_init_array+0x1e>
 8002fa0:	08003004 	.word	0x08003004
 8002fa4:	08003004 	.word	0x08003004
 8002fa8:	08003004 	.word	0x08003004
 8002fac:	08003008 	.word	0x08003008

08002fb0 <memset>:
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4402      	add	r2, r0
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d100      	bne.n	8002fba <memset+0xa>
 8002fb8:	4770      	bx	lr
 8002fba:	f803 1b01 	strb.w	r1, [r3], #1
 8002fbe:	e7f9      	b.n	8002fb4 <memset+0x4>

08002fc0 <_init>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr

08002fcc <_fini>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	bf00      	nop
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr
